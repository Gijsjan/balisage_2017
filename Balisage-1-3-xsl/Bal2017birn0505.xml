<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="balisage-1-3.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-stylesheet type="text/xsl" href="balisage-proceedings-html.xsl"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>The creature lives</title>
  <info>
    <abstract>
      <para>Abstract text will go here</para>
    </abstract>
    <author>
      <personname>
        <firstname>David</firstname>
        <othername>J.</othername>
        <surname>Birnbaum</surname>
      </personname>
      <personblurb>
        <para>David J. Birnbaum is Professor and Chair of the Department of Slavic Languages and
          Literatures at the University of Pittsburgh. He has been involved in the study of
          electronic text technology since the mid-1980s, has delivered presentations at a variety
          of electronic text technology conferences, and has served on the board of the Association
          for Computers and the Humanities, the editorial board of <emphasis role="ital">Markup
            languages: Theory and practice</emphasis>, and the Text Encoding Initiative Council.
          Much of his electronic text work intersects with his research in medieval Slavic
          manuscript studies, but he also often writes about issues in the philosophy of
          markup.</para>
      </personblurb>
      <affiliation>
        <jobtitle>Professor and Chair</jobtitle>
        <orgname>Department of Slavic Languages and Literatures, University of Pittsburgh</orgname>
      </affiliation>
      <email>djbpitt@gmail.com</email>
      <link xlink:type="simple" xlink:show="new" xlink:actuate="onRequest"
        >http://www.obdurodon.org</link>
    </author>
    <author>
      <personname>
        <firstname>Ronald</firstname>
        <othername>Haentjens</othername>
        <surname>Dekker</surname>
      </personname>
      <personblurb>
        <para>Add blurb about Ronald</para>
      </personblurb>
      <affiliation>
        <jobtitle><!-- job title goes here--></jobtitle>
        <orgname><!-- organization name goes here--></orgname>
      </affiliation>
      <email><!-- email goes here --></email>
      <link xlink:type="simple" xlink:show="new" xlink:actuate="onRequest"
        ><!-- url to Ronalds main web presence goes here--></link>
    </author>
    <keywordset role="author">
      <keyword>graph database</keyword>
      <keyword>LMNL</keyword>
      <keyword>overlap</keyword>
      <keyword>discontinuity</keyword>
      <keyword>mixed content</keyword>
    </keywordset>
  </info>
  <section>
    <title>General setup of this paper</title>
    <orderedlist>
      <listitem>
        <para>Where we are today: The XML tree model has several well-known limitations, some of
          which have received a lot of attention (overlap) and some of which have not
          (discontinuity; white space as crypto-overlap). All of these have well-known work-arounds
          that have disadvantages, but because they work and because XML has a large user community,
          it is difficult to overcome inertia and move to a technology that does not require awkward
          work-arounds.</para>
      </listitem>
      <listitem>
        <para>Requirements for an ideal (or, at least, improved) text model (focus on features not
          well supported by XML [tree] modeling)</para>
        <orderedlist>
          <listitem>
            <para>The goal is to add layers and layers of extra information to the text. These
              layers can be created by a human (manually) or added by a computer using parsers. Or a
              mix of both.</para>
          </listitem>
          <listitem>
            <para>These layers can overlap each other or be discontinuous.</para>
          </listitem>
          <listitem>
            <para>Possibility to read as well as write.</para>
          </listitem>
          <listitem>
            <para>Possibility to defer decisions about relations between layers. I.e., a hierarchy
              can be applied later, just like a schema is used right now in XML to validate a
              document.</para>
          </listitem>
        </orderedlist>
      </listitem>
      <listitem>
        <para>Introduce the TAG/hypergraph model for text as a processing model for the text and all
          layers of annotations. Illustrate general functionality, without emphasis on overlap,
          discontinuity, or white space, which are in focus below.</para>
      </listitem>
      <listitem>
        <para>How TAG addresses structures that are awkward for XML (description, XML approach, TAG
          approach, examples)</para>
        <orderedlist>
          <listitem>
            <para>Overlap. Examples include enjambment in poetry, pages/paragraphs in prose,
              Frankenstein.</para>
          </listitem>
          <listitem>
            <para>White space as crypto-overlap. Examples include caesura in poetry.</para>
          </listitem>
          <listitem>
            <para>Discontinuity. Examples include divided or interrupted speech in prose.</para>
          </listitem>
        </orderedlist>
      </listitem>
      <listitem>
        <para>Compare and contrast TAG/hypergraph with previous models for text processing, such as
          DOM, GODDAG, LMNL data model (ranges)</para>
        <orderedlist>
          <listitem>
            <para>TAG and DOM</para>
          </listitem>
          <listitem>
            <para>TAG and GODDAG</para>
          </listitem>
          <listitem>
            <para>TAG and LMNL</para>
            <orderedlist>
              <listitem>
                <para>The LMNL and TAG data models</para>
              </listitem>
              <listitem>
                <para>LMNL syntax in a TAG environment</para>
              </listitem>
              <listitem>
                <para>What LMNL syntax doesn't represent (apparently reserved for the limen, and not
                  yet specified) that TAG requires</para>
              </listitem>
            </orderedlist>
          </listitem>
        </orderedlist>
      </listitem>
      <listitem>
        <para>TAG in Alexandria (some of which may be plans or projections, rather than
          implementation)</para>
        <orderedlist>
          <listitem>
            <para>Introduction to Alexandria as a TAG implementation</para>
          </listitem>
          <listitem>
            <para>Graph and hypergraph</para>
          </listitem>
          <listitem>
            <para>Navigation and query</para>
          </listitem>
          <listitem>
            <para>Import and export</para>
          </listitem>
        </orderedlist>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Introduction</title>
    <para><!--Add introductory paragraph here--></para>
  </section>


  <section>
    <title>Rationale for moving beyond XML</title>
    <note>
      <para>Wendell himself discussed the relation between LMNL and OHCO in his 2014 Balisage paper
        here: <link
          xlink:href="http://www.balisage.net/Proceedings/vol13/print/Piez01/BalisageVol13-Piez01.html"
          >link to paper</link></para>
    </note>
    <para>Textual data is unstructured. Markups needs to be added to extract information from it.
      The most popular markup format to store textual data and markup is XML. XML follows a
      hierarchical model that allows one to add structure to a file. This works well for dividing
      text into chapters and paragraphs. However there are limitations.</para>
    <para>Adding a second hierarchy is difficult, since XML markup syntax requires that the last
      opened tag is closed first. Adding the structure of the pages for example overlaps with the
      stucture of the chapters and paragraphs. This can be worked around by adding a second
      hierarchy as milestones instead of start and end elements.</para>
    <para>The problem here is that one hierarchy is handled differently from the second hierarchy.
      The leading hierarchy is modeled using full start and elements.</para>
    <para>Modeling multiple hierarchies is possible in XML, but difficult because the second or
      third etc hierarchy needs to be modelled differently from the first hierarchy. This also leads
      to challenges when querying or transforming the data contained in the file.</para>
    <para>There are many real use cases where there are multiple hierarchies present in the data:
      poetry, stage plays.</para>
  </section>
  <section>
    <title>Requirements for a text model</title>
    <para>Features: Support textual content and annotations. Overlapping annotations should be
      possible. Should allow annotations on annotations. Hierarchical content should be possible but
      not required. Read: queries for text or annotations. Write: added or modifying textual
      content, adding or modifying annotations. Scalability: The model should allow for large (needs
      to be defined better) documents.</para>
    <note>
      <para>explain the differences between graph models and trees and ranges? Or leave that
        discussion out?</para>
    </note>
    <note>
      <para>Reading Wendell his papers/articles about LMNL and Luminescent I can't help but notice
        that it is mainly about modelling text using LMNL, querying (using xLMNL and xQuery
        extensions) and visualising data. These are all read only operations. The goal of the TAG
        model and its implementation in Alexandria is that it can be used to read as well as write
        textual data and annotations. This opens up a lot of new possibilities and makes it a
        'complete' text repository system, comparable to XML databases albeit in a far more
        experimental state and a much lower level of maturity.</para>
    </note>
  </section>
  <section>
    <title>Hypergraph model for text</title>
    <note>
      <para>Describe the model. Think of it as sets. The fact that Alexandria is a read-write system
        is very important.</para>
    </note>
    <para>This paper introduces the Alexandria text repository system. It allows the user to store
      text files in either XML or LMNL markup and allows for multiple layers of annotation that can
      overlap. The conceptual model behind Alexandria is a hypergraph for text as well as
      annotations. Graph models for text and markup have been proposed before (GODDAG, GrAF), but
      the model proposed in this paper differs in the fact that a hypergraph is used. Hypergraphs
      differ from traditional graphs, which contain edges that connect only two nodes with each
      other. The edges in a hypergraph, on the other hand,can connect more than two nodes with each
      other, for that reason they are called “hyperedges”. Hypergraphs can have directed and
      undirected hyperedges. Undirected hyperedges contain a set of nodes. Directed hyperedges
      contain two sets of nodes, one for the source and one for the target. The direction of the
      (hyper)edge implies the order or the hierarchy of the nodes. Hypergraphs are especially
      interesting for text modelling, because they can be implemented using sets. The data model
      consists of a number of objects:</para>
    <para> Nodes: - Document nodes. Each document node represents a single document stored in the
      graph. - Text nodes. Text nodes present segments of text, comparable to leaf nodes in a DOM
      tree. - Markup nodes: Markup nodes represent tags/markup present in the document. - Annotation
      nodes. Annotation nodes represent metadata on markup node. The model also allows for
      annotation nodes on annotation nodes.</para>
    <para> Edges: - Document to text directed edges. A document to text directed edge connects a
      document node (source) with the first text node (target) contained in that document. - Text
      node to text node directed edges. The text nodes themselves are connected with directed edges,
      which order them, so that the linear order of the text is preserved. - Markup to text nodes
      directed hyperedges. Markup hyperedges connect the tags/markup nodes (source) to text nodes
      (target) tagged with the markup in question. Note that the use of directed hyperedges allows
      us to connect n markup nodes with one text node and vice versa. - Annotation to text directed
      edges: connect annotation nodes to the first text node contained in that annotation. Here,
      “text node” contains the text of the annotation, not the original text. - Annotation directed
      edges: connect annotation nodes (source) with other annotation nodes (target) or connect an
      annotation (source) with a markup/tag node (target).</para>
    <para>
      <!--
     Text Graph Datamodel:

    A text graph representing all the data contained in a LMNL document consists
    of both a directed acyclic graph (DAG) and a hypergraph (HG). The DAG contains all the range nodes,
    the annotation nodes, all the edges between them, and all the text nodes and the edges between them.
    The HG contains all the hyperedges between the text nodes and the range nodes representing the many
    to many relation between them. I.e. a text node has zero or more ranges on it, while a range can have zero
    or more text nodes associated with it. A range can be annotated. An annotation can itself be annotated.
    -->
    </para>
  </section>
  <section>
    <title> Comparison with other text models </title>
    <para> Hypergraph versus ranges: With the range conceptual model it is inexpensive to add extra
      annotation layers, however modifying the textual content is very expensive, since all the
      ranges of annotations that come after the point of insertion have to be recalculated.
      Hypergraph versus GODDAG: With the directed acyclic graph model it is inexpensive to add or
      change textual content, however since all the annotation nodes have to be connected to all the
      textual nodes involves this model scales badly with the number of textual nodes and the number
      of annotations. Hypergraph versus DOM: In the traditional tree model it is cheap to add or
      modify textual content and to add annotations, however there is only a single hierarchy. On
      top of that having a hierarchy is required. Scalability of the hypergraph model versus all the
      other models: In the hypergraph approach it is inexpensive (we really should use O notations
      here) to add or modify textual content, adding annotations is not as cheap as it is with
      ranges, (a new set needs to be created and a bit needs to be set for every text node
      involved), but it cheaper than the DAG model, since hypergraphs can be stored as sets rather
      than having to model individual edges.</para>
  </section>
  <section>
    <title>Comparison of the Hypergraph model with LMNL markup file format</title>
    <para>The LMNL markup file format removes the constraint that the last opened has to be closed
      first. That means that it is possible to model overlapping hierarchies in LMNL. To be more
      precise, it is possible to model annotations with one hierarchy, multiple hierarchies or no
      hierarchy at all. This allows for a great freedom to model all kinds of information on textual
      content. This is great from a content perspective. However LMNL is more expensive from a
      computational perspective.</para>
    <para> LMNL data model LMNL documents contain text. Text can have ranges on them. Ranges can
      overlap. Ranges can be annotated on either the start tag or the end tag. Annotations can
      contain text themselves, that can have ranges, that can have annotations etc. Annotations can
      be annotated. Annotations on a range are ordered.</para>
  </section>
  <section>
    <title>LMNL conceptual model and how to map it to a hypergraph</title>
    <note>
      <para>It is very important that we explain what we kept of the original data model behind LMNL
        and what we changed and why.</para>
    </note>
    <para>The conceptual datamodel behind is XML is the Document Object Model (DOM). The DOM
      represents a tree based data structure. The data model behind LMNL is different, in that it is
      based on ranges, based on offsets on textual content.</para>
  </section>
  <section>
    <title>Example use case: tokenization with markup</title>
    <para> In natural language processing tokenization is the process of breaking a string of
      characters up into individual words. Tokenization is done using regular expressions. Regular
      expressions however only work on textual data and not on markup. (See the famous stackoverflow
      post for reference). On top of that the tokens themselves add another layer of information to
      file/model/data/document (not sure what the right word to use is here), which can overlap with
      the already existing hierarchy in the document. A data model for text that can handle multiple
      overlapping hierarchies or layers of annotations and that allows read as well as write
      operations can help out here. During tokenization all of the markup can be put 'aside' if it
      were and the tokenizer only pays attention to the textual content. The individual token are
      markup in a separate annotation layer. The existing markup layer are only ignored during
      tokenization, and still exist in the data.</para>
  </section>
  <bibliography>
    <title>Works cited</title>
    <bibliomixed xml:id="piez_2014" xreflabel="Piez 2014">Piez, Wendell. <quote>Hierarchies within
        range space: From LMNL to OHCO.</quote> Presented at <emphasis role="ital">Balisage: The
        Markup Conference 2014, Washington, DC, August 5 - 8, 2014.</emphasis> In <emphasis
        role="ital">Proceedings of Balisage: The Markup Conference 2014. Balisage series on markup
        technologies,</emphasis> vol. 13 (2014). DOI: 10.4242/BalisageVol13.Piez01.
        <link>http://www.balisage.net/Proceedings/vol13/html/Piez01/BalisageVol13-Piez01.html</link></bibliomixed>
    <bibliomixed xml:id="piez_2015" xreflabel="Piez 2015">Wendell Piez, <quote>TEI in LMNL:
        implications for modeling</quote>, <emphasis role="ital">Journal of the Text Encoding
        Initiative</emphasis> [Online], Issue 8 | December 2014 - December 2015, Online since 21
      November 2015, connection on 08 March 2017. URL: <link>http://jtei.revues.org/1337</link>;
      DOI: 10.4000/jtei.1337.</bibliomixed>
    <bibliomixed xml:id="sperberg-huitfeldt_2008" xreflabel="Sperberg-McQueen and Huitfeldt 2008"
      >Sperberg-McQueen, C. M., and Claus Huitfeldt. <quote>Markup Discontinued: Discontinuity in
        TexMecs, Goddag structures, and rabbit/duck grammars.</quote>
      <emphasis role="ital">Presented at Balisage: The Markup Conference 2008, Montréal, Canada,
        August 12 - 15, 2008.</emphasis> In <emphasis role="ital">Proceedings of Balisage: The
        Markup Conference 2008. Balisage Series on Markup Technologies</emphasis>, vol. 1 (2008).
      DOI: 10.4242/BalisageVol1.Sperberg-McQueen01.
        <link>http://www.balisage.net/Proceedings/vol1/html/Sperberg-McQueen01/BalisageVol1-Sperberg-McQueen01.html</link></bibliomixed>
  </bibliography>
</article>
