<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="balisage-1-3.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-stylesheet type="text/xsl" href="balisage-proceedings-html.xsl"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>It’s more than just overlap: text as graph</title>
  <subtitle>Refining our notion of what text really is—this time for sure!</subtitle>
  <!-- Verify that all items in bibliography are cited in body -->
  <!--
    rhd: There is one more thing that we might have to discuss: a lot of scholars when they 
    hear/read the word graph think of semantic networks. It is important to stress that a 
    text graph is not a semantic network. In the markup of an annotation layer it is of 
    course possible to link to persons, places, organisations, events etc in a semantic 
    network. The main point is that although a text graph and a semantic network are both 
    networks, and they can link to each other, there are not the same. I suspect the Balisage 
    crowd is more aware of this than the average  scholars but still. There are some Balisage 
    papers that advocate combining XML with semantic networks. A text graph approach is still 
    different from that approach. So maybe it would good to explicitly mention that to avoid 
    confusion.
  -->
  <info>
    <abstract>
      <para>The XML tree paradigm has several well-known limitations for document modeling and
        processing, some of which have received a lot of attention (especially overlap; see the
        overviews in <xref linkend="sperberg-huitfeldt_2000"/>, <xref linkend="derose_2004"/>, and
          <xref linkend="peroni_2014"/>) and some of which have received less (e.g., discontinuity,
        simultaneity, transposition, white space as crypto-overlap). Many of these have
        work-arounds, also well known, that—as is implicit in the term
        <quote>work-around</quote>—have disadvantages, but because they get the job done and because
        XML has a large user community with diverse levels of technological competence, it is
        difficult to overcome inertia and move to a technology that might offer a more comprehensive
        fit with the full range of document structures with which researchers need to interact both
        intellectually and programmatically. Proceeding from a high-level view of why XML has the
        limitations it has, this presentation explores how an alternative model of Text as Graph
        (TAG) might address these types of structures and tasks in a more natural and idiomatic way
        than is available within an XML paradigm.</para>
    </abstract>
    <author>
      <personname>
        <firstname>Ronald</firstname>
        <othername>Haentjens</othername>
        <surname>Dekker</surname>
      </personname>
      <personblurb>
        <para><!-- blurb about Ronald goes here --></para>
      </personblurb>
      <affiliation>
        <jobtitle><!-- job title goes here--></jobtitle>
        <orgname>Huygens ING</orgname>
      </affiliation>
      <email>ronald.dekker@huygens.knaw.nl</email>
      <link xlink:type="simple" xlink:show="new" xlink:actuate="onRequest"
        >https://www.huygens.knaw.nl/dekker/</link>
    </author>
    <author>
      <personname>
        <firstname>David</firstname>
        <othername>J.</othername>
        <surname>Birnbaum</surname>
      </personname>
      <personblurb>
        <para>David J. Birnbaum is Professor and Chair of the Department of Slavic Languages and
          Literatures at the University of Pittsburgh. He has been involved in the study of
          electronic text technology since the mid-1980s, has delivered presentations at a variety
          of electronic text technology conferences, and has served on the board of the Association
          for Computers and the Humanities, the editorial board of <emphasis role="ital">Markup
            languages: Theory and practice</emphasis>, and the Text Encoding Initiative Council.
          Much of his electronic text work intersects with his research in medieval Slavic
          manuscript studies, but he also often writes about issues in the philosophy of
          markup.</para>
      </personblurb>
      <affiliation>
        <jobtitle>Professor and Chair</jobtitle>
        <orgname>Department of Slavic Languages and Literatures, University of Pittsburgh</orgname>
      </affiliation>
      <email>djbpitt@gmail.com</email>
      <link xlink:type="simple" xlink:show="new" xlink:actuate="onRequest"
        >http://www.obdurodon.org</link>
    </author>
    <keywordset role="author">
      <keyword>graph database</keyword>
      <keyword>TAG</keyword>
      <keyword>simultaneity</keyword>
      <keyword>overlap</keyword>
      <keyword>discontinuity</keyword>
      <keyword>mixed content</keyword>
      <keyword>white space</keyword>
    </keywordset>
  </info>
  <section>
    <title>Introduction</title>
    <para>The XML tree paradigm has several well-known limitations for document modeling and
      processing, some of which have received a lot of attention (especially overlap; see the
      overviews in <xref linkend="sperberg-huitfeldt_2000"/> and <xref linkend="derose_2004"/>) and
      some of which have received less (e.g., discontinuity, simultaneity, transposition, white
      space as crypto-overlap). Many of these have work-arounds, also well known, that—as is
      implicit in the term <quote>work-around</quote>—have disadvantages, but because they get the
      job done and because XML has a large user community with diverse levels of technological
      competence, it is difficult to overcome inertia and move to a technology that might offer a
      more comprehensive fit with the full range of document structures with which researchers need
      to interact both intellectually and programmatically. Proceeding from a high-level view of why
      XML has the limitations it has, this presentation explores how an alternative model of Text as
      Graph (TAG) might address these types of structures and tasks in a more natural and idiomatic
      way than is available within an XML paradigm.</para>
    <para>From an informatic perspective all documents are structured, including those are
      traditionally identified as plain text. Some of the structural properties of plain-text
      documents are expressed through formatting conventions, such as the use of blank lines to
      separate paragraphs, or of indentation to mark the beginning of a paragraph, or of centering
      to mark a header. The sequence of words in a text, delimited in a complex way that involves
      white space, punctuation, and other symbols, constitutes, on a certain level, an
      organizational tier above the sequence of characters.<footnote>
        <para>Others properties, often more lexical than structural, may depend on contextual
          information that is not always expressed explicitly. For example, a capitalized reference
          to <quote>London</quote> is formally marked as a proper noun by capitalization, but
          whether it is a placename in England (or Ohio or Ontario or elsewhere) or the personal
          name of a US writer may not be represented formally.</para>
      </footnote> The conventions at work in plain text do not formally, completely, unambiguously,
      or in a wholly standardized way differentiate the content of a document from the coded
      representation of its structure (or, perhaps more accurately, structures), which complicates
      document processing (whether for data mining, publication, or other purposes). The challenge
      this poses has come to be addressed by representing the structural properties of a document
      not with plain-text characters (which might be considered pseudo-markup), but through
      standardized, formal markup, such as XML.</para>
    <para>The XML data model is a tree, or, more precisely, a rooted and ordered directed acyclic
      graph that prohibits multiple parentage, which in the document-processing community has come
      to be understood as representing an Ordered Hierarchy of Content Objects (OHCO). The OHCO
      model works well for describing structures that consist of single ordered hierarchies, such as
      the exhaustive tesselated division of a novel into chapters and the chapters into paragraphs.
      It is not well suited to structures that cannot be modeled fully as a single tree.<footnote>
        <para>The OHCO literature is already well known to the Balisage audience, and it is not our
          goal to provide an exhaustive bibliography. The seminal papers that advocated for OHCO as
          a document model are <xref linkend="coombs_1987"/> and <xref linkend="derose_1990"/>; the
          seminal examination of the limitations of OHCO, by some of the same authors, is <xref
            linkend="renear_1996"/> (first introduced as a conference presentation in 1992). Wendell
          Piez discusses issues pertaining to overlap and OHCO, and the alternative range model
          implemented in LMNL, in <xref linkend="piez_2014"/>.</para>
      </footnote> The markup community has focused intensively on overlapping hierarchies as a
      challenge to the OHCO model,<footnote>
        <para>Within the Balisage community, at present
            <link>http://www.balisage.net/Proceedings/topics/Concurrent_Markup~Overlap.html</link>
          lists twenty-five presentations from 2008 through 2016</para>
      </footnote> and with good reason, but we argue below that overlap is only one manifestation of
      a higher-level problem, and this perspective has implications for deciding how best to
      overcome it. If overlap were <emphasis role="ital">the</emphasis> problem, projecting multiple
      trees over the content might solve it (e.g., through the SGML <emphasis role="bold"
        >CONCUR</emphasis> feature<footnote>
        <para>See, e.g., <xref linkend="hilbert_2005"/>.</para>
      </footnote>), as might the adoption of a model that permits but does not require hierarchy,
      including multiple hierarchies, such as the range model exemplified by LMNL.<footnote>
        <para>See especially <xref linkend="piez_2014"/>.</para>
      </footnote> But if the problem is that a tree is inadequate for higher-level reasons that are
      only partially exemplified by overlap, we might have more success if we address the issue at
      that higher level.</para>
  </section>
  <section>
    <title>Desiderata for an improved text model</title>
    <!-- Michael and Claus 2008 emphasize that TEI markup requires semantics, while ours is in the model
      TexMECS has a strategy for this, while LMNL doesn't; do we need a TexMECS parser -->
    <!-- TexMECS requires quotations to be divided in the model, while we don't -->
    <para>The principal challenge to XML as a model of text is generally regarded as overlap, that
      is, that text has structural properties that humans care about that cannot be modeled directly
      as a tree, or, at least, as a rooted and ordered directed acyclic graph that does not permit
      multiple parentage and that is constructed from the seven types of nodes that constitute the
      XQuery and XPath data model.[<xref linkend="xdm6"/>] Although overlap has received most of the
      attention, overlap is only one challenge to XML modeling, and regarding overlap as <emphasis
        role="ital">the problem</emphasis>, instead of as <emphasis role="ital">a symptom of the
        problem</emphasis>, has led us to think more narrowly than we should about alternatives to
      OHCO. If what text <quote>really is</quote> is not an ordered hierarchy of content objects,
      what is it instead? The issues are well known to the XML community, so why have they come
      largely (although not entirely) to be eclipsed by overlap in discussions of what’s difficult
      about modeling documents in XML? These challenges, which have been negotiated in XML modeling
      and processing through workarounds, find a natural solution in the TAG model described here,
      as well as, at least in some respects, in LMNL and GODDAG/TexMECS.</para>
    <para>A second challenge of using XML as a model of text involves not the <emphasis role="ital"
        >limitations</emphasis> of OHCO, but its <emphasis role="ital">tyranny</emphasis>. If text
      is understood as an ordered hierarchy of content objects, are there aspects of text that are
      not ordered, are there aspects that are not hierarchical (by which we mean not just that they
      are not mono-hierarchical, but that they are not hierarchical at all), and does the model
      create content objects artifactually, that is, where they are not perceived as inherent
      properties of the text being modeled? XML requires us to model all content as both ordered and
      hierarchical, and it represents content objects as elements (at least as content objects are
      described in <xref linkend="derose_1990"/>). The GODDAG and LMNL alternatives to XML, which
      are discussed below, both grew out of a recognition that not all properties of text can be
      modeled effectively as a single hierarchy, and their focus is not limited to that issue, but
      they differ in the extent to which they interrogate aspects of text that may not be
      hierarchical, that may not be ordered, and that may not involve what a human would consider a
      content object.</para>
    <para>A third challenge of discussing XML as a model of text is distinguishing XML as a data
      model from XML as a syntax, and the same applies to the LMNL data model vs the LMNL sawtooth
      syntax and the GODDAG data structure vs TexMECS syntax. Perhaps a bit surprisingly in the
      context of Balisage, which describes itself as <quote>the <emphasis role="ital"
          >markup</emphasis> conference</quote>, our focus here is not on markup (that is, on syntax
      and serialization), but on the data models that may be expressed through markup. Our somewhat
      simplified <xref linkend="XML_specs"/> illustration, below, regards the marked-up XML document
      as related to the XML InfoSet by the operations of serialization in one direction and parsing
      in the other. This matters because the serialization is, as is clear from the etymology of the
      term, committed to an ordered expression in ways that other representations of XML may not be,
      and the same is true of other data models and their associated syntactic expressions through
      markup. If, for example, a paragraph is exactly coextensive with a quotation, in XML syntax,
      LMNL sawtooth syntax, and TexMECS syntax, the start tag of either the paragraph or the
      quotation must come first in linear order. But in LMNL that order is not an obligatory part of
      the model, according to which the two ranges begin at the same location in the stream of atoms.<footnote>
        <para>LMNL is able to represent hierarchy, but it is not obligatory, and <quote>flat</quote>
          LMNL does not express hierarchy.</para>
      </footnote> In XML, though, one element must contain the other, and the order of the start
      tags reflects the hierarchy. TexMECS is capable of distinguishing when the order of the start
      tags is informational and when it is not.<footnote>
        <para>STAGO vs STAGSO and ETAGO vs ETAGSO [<xref linkend="huitfeldt_2003"/>, §2.3.]</para>
      </footnote></para>
    <figure xml:id="XML_specs">
      <title>The XML document-processing ecosystem</title>
      <mediaobject>
        <imageobject>
          <imagedata format="png" fileref="xml-spec.png"/>
        </imageobject>
      </mediaobject>
      <caption>
        <para>The term <quote>XML</quote> may be used to refer to the data model or to its syntactic
          or other expressions.</para>
      </caption>
    </figure>
    <para>A fourth issue, which intersects with the three above, involves distinguishing properties
      that inhere in the text being modeled from those that depend on semantics that must be
      interpreted at a higher (application) level. A failure to make this distinction may have two
      types of consequences: either the application must know that some properties of the model are
      not informational or the application must know that there is information that is not
      represented entirely by the model. If, however, the model explicitly represents the properties
      of the text and nothing else, the application level is freed from having to supplement the
      model, and can concentrate on features that are truly application-specific. Here are two
      illustrations of this issue:<itemizedlist>
        <listitem>
          <para>The pairing of start and end tags in XML (or LMNL sawtooth or TexMECS) markup is
            inherent in the markup itself. In contrast, the pairing of XML milestones that are used
            to simulate container tags as a work-around for overlap (see the discussion of Trojan
            markup in <xref linkend="derose_2004"/>) relies on semantics. This means that
            applications do not have to know that regular start and end tags delimit an element, but
            they do have to know when empty tags are being used to simulate the beginning and end of
            a content object. Insofar as whether something is a content object is a property of the
            text being modeled, a robust and efficient strategy would represent it as part of the
            model itself, instead of requiring that it be handled through semantic information that
            is available only at the application level.</para>
        </listitem>
        <listitem>
          <para>Because XML models an ordered hierarchy, elements always have order, which requires
            the application layer to distinguish situations where order is semantically meaningful
            from situations where it isn’t. For example, the TEI <code>&lt;choice&gt;</code>
            elements has the semantics of associating content objects that do not have a natural
            order with respect to one another, such as an abbreviation and its expansion or an error
            and its correction. How those should be handled is the business of the application
            layer, but the model requires that one option proceed or follow the other even when the
            order does not represent an inherent property of the text being modeled. A more robust
            and efficient strategy would not impose order when it must then be ignored, so that an
            application will be able to regard the presence or absence of order in the model as
            informational without recourse to semantics.</para>
        </listitem>
      </itemizedlist></para>
    <para>An improved text model should have the following properties. In all instances where we
      write that <quote>the model should be able to X</quote>, we mean that it should be able to X
      without requiring access to semantic information at the application level. In other words, the
      components of the model should fully represent the properties of the text being modeled, with
      no extraneous artifactual properties that an application must then know to ignore. The
      following are characteristics we might ask of an improved text model:<itemizedlist>
        <!-- Add one-sentence examples of each of these -->
        <!-- Do we need to explain more clearly what we mean by "annotation" here? -->
        <listitem>
          <para>It should support both textual (character data) content and annotations (of the sort
            expressed in XML through element and attribute markup).</para>
        </listitem>
        <listitem>
          <para>It should support multiple layers of annotation.</para>
        </listitem>
        <listitem>
          <para>It should be able to represent overlapping annotations.</para>
        </listitem>
        <listitem>
          <para>It should be able to represent discontinuous annotations.</para>
        </listitem>
        <listitem>
          <para>It should be able to represent components that are not logically ordered without
            imposing an arbitrary order that must then be ignored.</para>
        </listitem>
        <listitem>
          <para>It should be able to represent transpositions, or reorderings, e.g., in a critical
            text with variants that differ only in order.</para>
        </listitem>
        <listitem>
          <para>It should support annotations on
            annotations.<!-- Give an example of why this is desirable --></para>
        </listitem>
        <listitem>
          <para>It should support but not require the representation of hierarchy, including
            multiple, partial, or overlapping hierarchies or annotations.</para>
        </listitem>
        <listitem>
          <para>With respect to reading, it should support queries for text, annotations, or a
            combination of the two.</para>
        </listitem>
        <listitem>
          <para>With respect to writing, it should support creating, inserting, deleting, or
            otherwise modifying both textual content and annotations.</para>
        </listitem>
        <listitem>
          <para>With respect to workflow, it should be possible to defer decisions about relations
            among layers. For example, it should be possible to create annotations without hierarchy
            and apply a hierarchy only later. This deferral might be compared to the way XML
            documents may be validated against schemas that may be created and associated only after
            a fully functional well-formed document has been created.</para>
        </listitem>
        <listitem>
          <para>With respect to scalability, it should enable, in a computationally efficient way,
            the types of documents and processing likely to be required by the digital text
            community.</para>
        </listitem>
        <listitem>
          <para>With respect to I/O, a system that implements the model should support serialization
            as plain text on export and the parsing of such serializations on import. TAG does not
            currently have its own syntax; it can read and write LMNL syntax (although not all TAG
            properties currently have a defined representation in LMNL syntax), and it is intended
            to be able to read and write TexMECS.<footnote>
              <para>Neither LMNL sawtooth syntax nor TexMECS can represent all features of TAG. For
                example, LMNL supports annotations on annotations, while TexMECS doesn’t. TexMECS
                supports hierarchy, while LMNL sawtooth syntax does not. LMNL can represent
                hierarchy through the <emphasis role="ital">limen</emphasis>, but the limen
                currently has no defined representation in the syntax. [<xref linkend="piez_2008"/>]
                We leave unresolved for now the question of how to serialize fully all information
                in a TAG document.</para>
            </footnote></para>
        </listitem>
        <listitem>
          <para>With respect to user interaction, a system that implements the model should provide
            a legible interface that enables reading and writing by human users.<footnote>
              <para>We leave unresolved for now the design and implementation of such an interface,
                except to say that it might not require a specialized, TAG-aware editor. One
                approach might involve the selective export of TAG information for manipulation in a
                third-party editor, followed by its reimport and reintegration into the TAG
                document.</para>
            </footnote></para>
        </listitem>
      </itemizedlist></para>
    <!--explain the differences between graph models and trees and ranges? Or leave that
        discussion out?-->
    <!--Reading Wendell his papers/articles about LMNL and Luminescent I can't help but notice
        that it is mainly about modelling text using LMNL, querying (using xLMNL and xQuery
        extensions) and visualising data. These are all read only operations. The goal of the TAG
        model and its implementation in Alexandria is that it can be used to read as well as write
        textual data and annotations. This opens up a lot of new possibilities and makes it a
        'complete' text repository system, comparable to XML databases albeit in a far more
        experimental state and a much lower level of maturity.-->
  </section>
  <section>
    <title>The TAG/hypergraph model for text</title>
    <!--Describe the model. Think of it as sets. The fact that Alexandria is a read-write system
        is very important.-->
    <section>
      <title>About the TAG/hypergraph model and the Alexandria implementation</title>
      <para>This paper introduces the Alexandria text repository system, an open-source read/write
        implementation of the TAG model. It allows the user to import and store text files in either
        XML or LMNL markup (with support planned for TexMECS), and it supports multiple layers of
        annotation that are permitted to overlap. The conceptual model behind Alexandria is a
        hypergraph for text as well as annotations.</para>
      <para>Graph models for text and markup have been proposed before (GODDAG [see, e.g., <xref
          linkend="sperberg-huitfeldt_2000"/>], GrAF [see, e.g., <xref linkend="ide_2007"/>]), but
        the model proposed in this paper differs from those because it incorporates a <emphasis
          role="bold">hypergraph</emphasis>. Hypergraphs differ from traditional graphs, the edges
        of which can connect only two nodes with each other. The edges in a hypergraph, on the other
        hand, can connect more than two nodes with one another, for that reason they are called
          <emphasis role="bold">hyperedges</emphasis>. Hypergraphs can have directed and undirected
        hyperedges. Undirected hyperedges contain a set of nodes. Directed hyperedges contain two
        sets of nodes, one for the source (called the <emphasis role="bold">head</emphasis>) and one
        for the target (called the <emphasis role="bold">tail</emphasis>). The direction of a
        (hyper)edge implies an order or a hierarchy of the nodes. Hypergraphs are especially
        valuable for text modeling because they can be implemented using sets. The TAG data model
        consists of a number of node and edge objects of different types.</para>
    </section>
    <section>
      <title>Nodes</title>
      <para>The following types of nodes are supported by TAG:<itemizedlist>
          <listitem>
            <para><emphasis role="bold">Document nodes.</emphasis> Each document node represents a
              single document stored in the graph.</para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Text nodes.</emphasis> The textual content of a TAG document
              is stored in one or more text nodes, roughly comparable to XML <code>text()</code>
              nodes. The order of the text nodes is represented by directed edges that connect them
              in textual order (see below about alternative order and unordered text nodes). The
              first text node can be recognized because there is a link to it from the document
              node.</para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Markup nodes.</emphasis> Markup nodes correspond roughly to
              element nodes in XML, and each instance of markup is represented by its own node. Markup
              nodes are connected to the one or more text nodes to which they apply by a hyperedge,
              where the markup node is the head and the set of text nodes is the tail. <!-- Do markup nodes point only to text nodes? XML elements may contain other elements rather than text.  -->
              <!-- What is the tag representation of an XML empty element, which contains neither text nor elements? --></para>
          </listitem>
          <listitem>
            <para> Annotations (called Attributes in XML). All annotations have their own node.
              Annotation nodes are connected .. Overlap: Overlap can be naturally be modelled in a
              graph, since multiple parents are allowed.</para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Annotation nodes.</emphasis> Annotation nodes represent
              metadata on markup node. The model also allows for annotation nodes on annotation
              nodes.</para>
          </listitem>
        </itemizedlist></para>
    </section>
    <section>
      <title>Edges</title>
      <para>The edge types supported by the model are: <itemizedlist>
          <listitem>
            <para><emphasis role="bold">Document to text directed edges.</emphasis> A document to
              text directed edge connects a document node (source) with the first text node (target)
              contained in that document.</para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Text node to text node directed edges.</emphasis> The text
              nodes themselves are connected with directed edges, which order them, so that the
              linear order of the text is preserved.</para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Markup to text nodes directed hyperedges.</emphasis> Markup
              hyperedges connect the tags/markup nodes (source) to text nodes (target) tagged with
              the markup in question. Note that the use of directed hyperedges allows us to connect
                <emphasis role="ital">n</emphasis> markup nodes with one text node and vice
              versa.</para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Annotation to text directed edges.</emphasis> These connect
              annotation nodes to the first text node contained in that annotation. <quote>Text
                node</quote> contains the text of the annotation, not the original text.</para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Annotation directed edges.</emphasis> These connect
              annotation nodes (source) with other annotation nodes (target), or they connect an
              annotation (source) with a markup/tag node (target).</para>
          </listitem>
        </itemizedlist></para>
    </section>
  </section>
  <section>
    <title>How TAG addresses structures that are awkward for XML</title>
    <para>In this section we illustrate how several types of structures that are awkward for XML
      because they contradict or otherwise are not part of the OHCO tree model can be represented in
      a natural way in TAG. For each we provide an abstract description of the problem, of one or
      more XML workarounds, and of the TAG approach, illustrated with examples drawn from use cases
      in Digital Humanities research projects. The issues do not all pertain to the <quote>H</quote>
      (hierarchy) of OHCO; some involve <quote>O</quote> (order) or <quote>CO</quote> (content
      objects) components, and those that do pertain to hierarchy do not all involve overlap.</para>
    <section>
      <title>Overlap</title>
      <para>The challenge to modeling texts in XML that has attracted the most attention is overlap,
        but overlap is sometimes described as a property of XML serialization, rather than of the
        XML data model. Or, more precisely, overlap is one thing in the XML data model and a
        different, but related thing in an XML serialization. In the data model, overlap refers to
        multiple concurrent trees or partial trees, a situation that is not possible in XML because
        XML is defined as a single tree. Notice in the image below how the phrase <quote>Two vast
          and trunkless legs of stone Stand in the desart</quote> begins in the middle of line 2 and
        ends in the middle of line 3, so that a tree of phrases overlaps a tree of lines:</para>
      <figure xml:id="ozymandius">
        <title>Percy Bysshe Shelley, <quote>Ozymandias</quote></title>
        <mediaobject>
          <imageobject>
            <imagedata format="png" fileref="ozymandius.png"/>
          </imageobject>
        </mediaobject>
        <caption>
          <para>[Image from
              <link>http://piez.org/wendell/papers/dh2010/clix-sonnets/ozymandias-map.svg</link>,
            which is part of <xref linkend="piez_2010"/>. The overlap is easier to see in the
            original SVG, which is animated, and highlights portions of the document in response to
            mouse events.]</para>
        </caption>
      </figure>
      <para>Piez’s illustration is actually of LMNL ranges (see below), rather than of XML element
        trees. The same structure might be visualized as overlapping trees as follows, where cyan
        represents the tree of metrical lines and green represents the tree of linguistic
        phrases:</para>
      <figure xml:id="ozymandius_trees">
        <title>Percy Bysshe Shelley, <quote>Ozymandias</quote></title>
        <mediaobject>
          <imageobject>
            <imagedata format="png" fileref="ozymandius_trees.png"/>
          </imageobject>
        </mediaobject>
        <caption>
          <para>Projecting two independent trees over a common set of words. In XML the individual
            words would be not be children of <code>&lt;line&gt;</code> and
              <code>&lt;phrase&gt;</code> elements, and would instead be grouped inside
              <code>text()</code> node children of those elements.</para>
        </caption>
      </figure>
      <para>Because it is not possible to represent the preceding structure in XML markup, the
        following pseudo-XML is not well-formed:</para>
      <programlisting>&lt;line&gt;&lt;phrase&gt;Who said —&lt;/phrase&gt; &lt;phrase&gt;“Two vast and trunkless legs of stone&lt;/line&gt;
&lt;line&gt;Stand in the desart….&lt;/phrase&gt; &lt;phrase&gt;Near them,&lt;/phrase&gt; &lt;phrase&gt;on the sand&lt;/phrase&gt;&lt;/line&gt;</programlisting>
      <para>New XML users often misunderstand the prohibition against overlap as a prohibition
        against overlapping <emphasis role="ital">tags</emphasis>, but if that were the issue, it
        could be remedied by simply removing the prohibition. The reality is that tags are a feature
        only of the <emphasis role="ital">serialization</emphasis> of XML, and XML as a <emphasis
          role="ital">data model</emphasis> has hierarchical elements, rather than tags. The reason
        overlap is prohibited, then, has nothing to do with a rule about tags; the rule about tags
        exists because tags must represent the data model, the hierarchy in the data model prohibits
        multiple parentage, and overlap would require that a <code>text()</code> node have more than
        one parent. Overlap is possible in GODDAG not because TexMECS permits overlapping tags, but
        because GODDAG permits <code>text()</code> nodes to have multiple parents and TexMECS
        serializes the GODDAG model. LMNL sawtooth syntax may look like XML syntax with the
        prohibition against overlapping tags removed, but the real difference is at the level of the
        data model: LMNL <emphasis role="ital">ranges</emphasis> may overlap, and the content
        between XML start and end tags is a sequence of descendant nodes in a tree, and not a range
        of atoms.</para>
      <para>TAG represents overlap naturally because the TAG counterpart to an XML element is a
        directed hyperedge that associates a head markup node with a set of tail nodes. To tag a
        line of poetry in the example above, TAG would create a hyperedge from a markup node with
        the name <quote>line</quote> (comparable to a <code>&lt;line&gt;</code> element in XML) to a
        set of text nodes (comparable to <code>text()</code> nodes in XML). Sets are unordered, but
        because the TAG automatically creates <quote>sequence</quote> edges between text nodes,
        which record the continuous order of the text stream (comparable to the sequence of atoms in
        the LMNL model), the textual content of the line is fully specified by (= can be retrieved
        by examining) the membership of the set of tail nodes and the sequence edges between them.
        In the illustration below, the black arrows represent regular edges that connect text nodes
        in order, the irregular colored bounding lines demarcate the sets of tail nodes, and a
        similarly colored arrow points into them from their markup node heads:</para>
      <figure xml:id="overlap_hypergraph">
        <title>Percy Bysshe Shelley, <quote>Ozymandias</quote></title>
        <mediaobject>
          <imageobject>
            <imagedata format="png" fileref="ozymandius_hypergraph.png"/>
          </imageobject>
        </mediaobject>
        <caption>
          <para>A hypergraph representing overlap of phrases and metrical lines.</para>
        </caption>
      </figure>
      <para>The absence of synchronicity between verse lines and sentences in poetry is called
          <emphasis role="ital">enjambment</emphasis>.<footnote>
          <para>In this example we have tagged phrases, rather than sentences, but since phrases are
            constituents of sentences, a phrase break that crosses a metrical line boundary normally
            also entails a sentence break, and therefore an enjambment.</para>
        </footnote> Additional use cases involving overlap challenges in XML include pages vs
        paragraphs in publications of novels, folios vs texts in medieval manuscripts, and speeches
        vs metrical lines in drama. Overlap in poetic structures has been explored in detail in
          <xref linkend="piez_2014"/>, which also discusses an unusual structural paradox involving
        Chapter 24 of Mary Shelley’s <emphasis role="ital">Frankenstein</emphasis>. Overlap
        involving word and metrical foot boundaries in poetry are discussed below.</para>
    </section>
    <section>
      <title>Discontinuity</title>
      <para><xref linkend="sperberg-huitfeldt_2008"/> discusses the following paragraph from Lewis
        Carroll’s <emphasis role="ital">Alice in Wonderland</emphasis> as an example of
        discontinuity:</para>
      <blockquote>
        <para>Alice was beginning to get very tired of sitting by her sister on the bank, and of
          having nothing to do: once or twice she had peeped into the book her sister was reading,
          but it had no pictures or conversations in it, <quote>and what is the use of a
            book,</quote> thought Alice <quote>without pictures or conversation?</quote></para>
      </blockquote>
      <para>There is no way to mark up this passage in XML without fragmenting the quotation into
        two elements (and relying on semantics to stitch together the pieces in the application
        layer), yet our human intuition is that there is a single quotation, and that the model,
        therefore, should represent it as a single object.<footnote>
          <para>It is possible to interpret the entire quotation as an element with three child
            nodes: a <code>text()</code> node, an intervening element that holds the narrative
            interjection, and then another <code>text()</code>, and in that sense the quotation is
            one object, although that object incorporates something that is not part of what a human
            understands as the quotation. <xref linkend="sperberg-huitfeldt_2008"/> explains why
            this is unsatisfactory (see especially their footnote 2).</para>
        </footnote> As <xref linkend="sperberg-huitfeldt_2008"/> also observe, there is a sense in
        which <quote>book</quote> and <quote>without</quote> are adjacent and a different sense in
        which <quote>book</quote> and <quote>thought</quote> are adjacent. The XML data model cannot
        represent both of these realities simultaneously, which means that at least one of them must
        be handed off to the application layer.</para>
      <para>
        <xref linkend="sperberg-huitfeldt_2008"/> situate this type of structure in a GODDAG
        context, where it intersects with the distinction between <emphasis role="ital"
          >containment</emphasis> and <emphasis role="ital">dominance</emphasis>. Concerning LMNL,
        they write that </para>
      <blockquote>
        <para>[with respect to] the unity of discontinuous elements: such a unity may be asserted by
          the application layer (that is, by the definition of a LMNL vocabulary), but it is not
          visible on the LMNL level, and thus need not be accounted for at the level of LMNL
          itself.</para>
        <para>The design of LMNL thus seems to require that any account of dominance (as distinct
          from containment), and any account of discontinuous elements, be handled in the
          application layer. LMNL itself achieves a degree of simplicity and regularity as a result,
          at the expense of complexity in the application.</para>
      </blockquote>
      <para><xref linkend="piez_2008"/> describes discontinuity as modeled by the <emphasis
          role="ital">limen</emphasis>, where the example provided
          (<link>http://piez.org/wendell/LMNL/Amsterdam2008/presentation-slides.html#page23</link>)
        records it through coindexed annotations. That dependency seems to locate discontinuity in
        an application layer, since whether coindexed annotations represent discontinuity is not an
        inherent property of the coindexing.</para>
      <para>TAG prioritizes the representation of text structures, including discontinuity, in the
        model, without dependency on application-layer semantics. The example from Alice in
        Wonderland described above would have the following form in our graph:</para>
      <figure xml:id="discontinuity_hypergraph">
        <title>Lewis Carroll, <quote>Alice in Wonderland</quote></title>
        <mediaobject>
          <imageobject>
            <imagedata format="png" fileref="discontinuity_hypergraph.png"/>
          </imageobject>
        </mediaobject>
        <caption>
          <para>Each hyperedge points from a markup node head (identifying the type of text
            structure) to a tail set of text nodes. Normal edges connect the text nodes in
            order.</para>
        </caption>
      </figure>
    </section>
    <section>
      <title>White space as crypto-overlap</title>
      <para><emphasis role="bold">TODO: Examples include caesura in poetry</emphasis></para>
    </section>
    <section>
      <title>Containment and dominance (cite someone; Jeni?)</title>
      <para><emphasis role="ital">TODO: Where two ranges fully overlap, XML requires one to contain
          and dominate the other</emphasis></para>
    </section>
    <section>
      <title>Simultaneity</title>
      <para><emphasis role="bold">TODO: Examples include parallel readings in critical texts,
          simultaneous speech</emphasis></para>
    </section>
    <section>
      <title>Transposition</title>
      <para><emphasis role="bold">TODO: Examples include reordering across witnesses in criticial
          texts</emphasis></para>
    </section>
    <section>
      <title>Reference scope</title>
      <para><emphasis role="ital">Footnotes in XML are usually milestones, but they should be
          annotations on elements, since milestones don’t have scope. But XML doesn’t permit markup
          in attributes. XML could make a footnote a child element, the parent of which is its
          scope, but then the footnote becomes part of the content of the parent, rather than an
          annotation. This is a use case for markup on annotations.</emphasis> Side issue: should
        annotations in TAG be ordered? How about: no, unless there’s an edge that says
        otherwise.</para>
    </section>
    <section>
      <title>Artifactual content objects</title>
      <para><emphasis role="bold">The &lt;app&gt; wrapper around readings in TEI parallel
          segmentation isn’t in the variant graph. Why should it be in the model of a critical
          text?</emphasis></para>
    </section>
  </section>
  <section>
    <title>Comparison of TAG/hypergraph to other text models</title>
<<<<<<< HEAD
    <para>In this section we compare and contrast the TAG data model with previous models for
      text modelling and processing, such as Information Set as implemented in DOM (tree), GODDAG (forrest/graph), and the LMNL data model(range).</para>
    
=======
    <para>In this section we compare and contrast the TAG data model with previous models for text
      modelling and processing, such as Information Set as implemented in DOM (tree), GODDAG
      (forrest/graph), and the LMNL data model(range).</para>

>>>>>>> fa5cbe36058c9a06924c58cdcb02c4d331d2d207
    <!-- This is a very generic overview... maybe not here -->
    <para>The document is written in a text serialization format, like XML or LMNL. It is then
      processed by a processor into memory model, like DOM. TAG is a replacement of DOM, competes
      with DOM, or with the Datamodel behind LMNL, based on ranges. NOTE: maybe a picture showing
      the use of XML markup to DOM and LMNL to TAG should be made to make clear what it is we are
      actually presenting here. The DOM (Document Object Model) is an API for XML processing. The
      alternative is XML Event processing. The DOM can contain both HTML and XML markup. </para>
    <section>
      <title>TAG and DOM</title>
<<<<<<< HEAD
      
      <para>Document Object Model (DOM)  is an application programming interface (API) for XML
        processing that contains a data model based on the XML Information Set. </para>
      <para>Both the DOM and TAG data models are node based. In both models the nodes are typed. The
        DOM consists of the following nodes: Document, DocumentType, DocumentFragment, Element,
        Text, ProcessingInstruction and Comment. Here is how the types in DOM and in TAG map to one
        another: the TAG Document node maps to the DOM Document node. In the place of the Element
        nodes of the DOM comes the Markup node of the TAG model. Text nodes in the DOM model are
        part of the TAG model as well. XML Attribute nodes map to TAG annotations. NOTE:
        ProcessingInstruction and Comments have no equivalent in TAG at the moment and are skipped
        for now in Alexandria, but could be added later. That is just an implementation
        detail.</para>
      <para>The difference between DOM and TAG lays in the way the nodes are laid out. In DOM the
        nodes are ordered in a tree hierarchy, while in TAG nodes are placed in a graph. The DOM
        model uses a tree based model, where there is a root node, which can have children, which
        are ordered sets. Every node can only have one parent node, and can only be child of one
        parent node. Thus representing a 1 to n relation between the parent and the childnodes. The
        TAG model uses a hypergraph instead, where nodes are connected through the use of
        hyperedges. Markup nodes can contain multiple Text nodes, while Text nodes can be part of
        multiple Markup nodes, thus allowing for n to n relations between text segments and markup
        nodes.</para>
      <para>In contrast with the DOM model there does not need to be a root element in the TAG
        model. A root element in TAG would simply be a markup node that is connected through a
        hyperedge with all the text nodes of the document. In fact there is no requirement to have a
        hierarchy at all.</para>
=======

      <para>DOM is an API for XML processing containing a data model based on the XML Information
        Set. The DOM contains a Node tree consisting of the following nodes: Document, DocumentType,
        DocumentFragment, Element, Text, ProcessingInstruction and Comment. </para>


      <para>Just like the DOM model the TAG model contains numerous types of nodes: TAG has a
        Document node, just like the Document Node in DOM. In the place of the Element nodes of the
        DOM comes the Markup node of the TAG model. Text nodes in the DOM model are part of the TAG
        model as well. NOTE: ProcessingInstruction and Comments are skipped for now in Alexandria,
        but could be added later. That is just an implementation detail.</para>
      <para>The difference between DOM and TAG lays in the way the nodes are laid out. The DOM model
        uses a tree based model, where there is a root node, which can have children, which are
        ordered sets. Every node can only have one parent node, and can only be child of one parent
        node. Thus representing a 1 to n relation between the parent and the childnodes. The TAG
        model uses a hypergraph instead, where nodes are connected through the use of hyperedges,
        allowing for n to n relations between text segments and markup nodes.</para>
      <para>In contrast with the DOM model there does not need to be a root element/node in the TAG
        model. A root node would simply be a markup node that is connected through a hyperedge with
        all the text nodes of the document. In fact there is no requirement to have a hierarchy at
        all.</para>
>>>>>>> fa5cbe36058c9a06924c58cdcb02c4d331d2d207
      <para>Also relations between markup nodes and text nodes or other markup nodes do not strictly
        have to be hierarchical. There can be multiple types of relationships between markup nodes.
        In DOM the relationship between a parent and a child is always one of dominance. By default
        there is no relation between markup nodes. Dominance relations can be expressed but have to
        be explicitly indicated by adding a edge between the two markup nodes of type Dominance.
        Containment relations can be calculated from the intersection of the text nodes of two
        markup nodes and does not have to be explicitly modelled.</para>
      <para>In the TAG hypergraph model a hyperedge that connects the text nodes with the markup
        nodes can be discontinuous. This is a clear difference with the DOM model, where all the
        text nodes are leaf nodes of the subtree underneath the element node. Thus the nodes
        underneath an element are continuous.</para>
      <para>In both the DOM and the TAG model adding a new text element or a new markup is a local
        operation.</para>
    </section>
    <section>
      <title>TAG and GODDAG</title>
      <para>The GODDAG datastructure allows for the storage of multiple hierarchies. Markup written
        in the MECS format can be parsed and read into memory. Elements that fully overlap are
        presumed to be dominating. Hierarchical structures are implied. Discontinuity is not
        supported. The graph is directed from the root node. The order of the text nodes is derived
        from the traversal of the element nodes. TAG differs in the sense that the order of text
        nodes is derived from explicit directed edges between the text segments. TAG differs in
        another way in the sense that relations between elements do not have to be one of
        domination. Relations between elements can be expressed by adding extra edges that are
        typed. The kind of relations can be determined later through the use of a schema. GODDAG and
        TAG are similar in the sense that they both support a N to N relation between elements
        (called markup in TAG) and PC-DATA nodes (called text nodes in TAG).</para>
    </section>
    <section>
      <title>TAG and LMNL</title>
      <para><emphasis role="bold">TODO: General comments about TAG and LMNL</emphasis></para>
      <para>One of the differences with the DOM model is that the type of relation between the
        markup nodes can be deferred to a later stage. LMNL has the same idea, see the comparison
        with LMNL for more information.</para>
      <para> Modification is not a local operation: there it differs from the LMNL model see the
        comparison with the LMNL model.</para>
      <section>
        <title>The LMNL and TAG data models</title>
        <para><emphasis role="bold">TODO</emphasis></para>
      </section>
      <section>
        <title>LMNL syntax in a TAG environment</title>
        <para><emphasis role="bold">TODO</emphasis></para>
      </section>
      <section>
        <title>What LMNL syntax doesn't represent</title>
        <para><emphasis role="bold">TODO:</emphasis> (apparently reserved for the limen, and not yet
          specified) that TAG requires</para>
      </section>
        
  
      <section>
        <title>Hypergraph versus ranges</title>
        <para>With the range conceptual model it is inexpensive to add extra annotation layers,
          however modifying the textual content is very expensive, since all the ranges of
          annotations that come after the point of insertion have to be recalculated. Hypergraph
          versus GODDAG: With the directed acyclic graph model it is inexpensive to add or change
          textual content, however since all the annotation nodes have to be connected to all the
          textual nodes involves this model scales badly with the number of textual nodes and the
          number of annotations. Hypergraph versus DOM: In the traditional tree model it is cheap to
          add or modify textual content and to add annotations, however there is only a single
          hierarchy. On top of that having a hierarchy is required. Scalability of the hypergraph
          model versus all the other models: In the hypergraph approach it is inexpensive (we really
          should use O notations here) to add or modify textual content, adding annotations is not
          as cheap as it is with ranges, (a new set needs to be created and a bit needs to be set
          for every text node involved), but it cheaper than the DAG model, since hypergraphs can be
          stored as sets rather than having to model individual edges.</para>
      </section>
      <section>
        <title>Comparison of the hypergraph model with the LMNL markup file format</title>
        <para>A text graph representing all the data contained in a LMNL document consists of both a
          directed acyclic graph (DAG) and a hypergraph (HG). The DAG contains the range nodes, the
          annotation nodes, the edges between them, and all the text nodes and the edges between
          them. The HG contains all the hyperedges between the text nodes and the range nodes
          representing the many-to-many relation between them. That is, a text node has zero or more
          ranges on it, while a range can have zero or more text nodes associated with it. A range
          can be annotated, and an annotation can itself be annotated.</para>
        <para>The LMNL markup file format removes the constraint that the last opened has to be
          closed first. That means that it is possible to model overlapping hierarchies in LMNL. To
          be more precise, it is possible to model annotations with one hierarchy, multiple
          hierarchies or no hierarchy at all. This allows for a great freedom to model all kinds of
          information on textual content. This is great from a content perspective. However LMNL is
          more expensive from a computational perspective.</para>
        <para>LMNL data model LMNL documents contain text. Text can have ranges on them. Ranges can
          overlap. Ranges can be annotated on either the start tag or the end tag. Annotations can
          contain text themselves, that can have ranges, that can have annotations etc. Annotations
          can be annotated. Annotations on a range are ordered.</para>
      </section>
      <section>
        <title>LMNL conceptual model and how to map it to a hypergraph</title>
        <!--It is very important that we explain what we kept of the original data model behind
            LMNL and what we changed and why.-->
        <para>The conceptual datamodel behind is XML is the Document Object Model (DOM). The DOM
          represents a tree based data structure. The data model behind LMNL is different, in that
          it is based on ranges, based on offsets on textual content.</para>
      </section>
    </section>
    <section>
      <title>TAG and linguistic corpora</title>
      <para><emphasis role="bold">TODO: Linguistic corpora are not recursive; there’s a single text
          stream</emphasis></para>
    </section>
  </section>
  <section>
    <title>TAG in Alexandria</title>
    <!--some of this may be plans or projections, rather than implementation-->
    <section>
      <title>Introduction to Alexandria as a TAG implementation</title>



      <para><emphasis role="bold">TODO: write something</emphasis></para>
    </section>
    <section>
      <title>Graph and hypergraph</title>
      <para><emphasis role="bold">TODO: write something</emphasis> The implementation in the current
        Alexandria markup system stores the nodes and hyperedges in a key-value store. </para>
    </section>
    <section>
      <title>Navigation and query</title>
      <para><emphasis role="bold">TODO: write something</emphasis></para>
    </section>
    <section>
      <title>Import and export</title>
      <para> The Alexandria Markup system contains a parser that can import LMNL files and convert
        into an implementation of the TAG model in memory. Given the following LMNL markup "Hello
        World". We save this plain text transcription in a LMNL file. When we import this file into
        Alexandria a graph is created. The graph is very simple: it only consists of 2 nodes and 1
        edge. One Document node is created. One Text node is created, containing all of the text. An
        edge is created from the Document node to the text node associating the text with the
        document. When we change the LMNL markup to "[doc}Hello World{doc]" How serialization works
        A serialization of the TAG data model into a LMNL file is an example of an traversal over an
        instance. Start with the Document node. A document node has an outgoing edge to the first
        text node. Now we follow the hyperedges that are connect to this text node. There can be
        zero or more hyperedges present on a text nodes. Each hyperedge connects to one markup node.
        We collect all the markup nodes that are connected to the text node. For each of them we
        write a start tag. Then we go the next text node by following the outgoing edge to the next
        text node. Like before we collect all the markup node connected to this text node. We
        calculate the differences between the sets. For the intersection we do nothing. For markup
        nodes that are only the set of the previous nodes we write close tags. For the set of markup
        nodes that is only in the current set of markup nodes we write open tags. <emphasis
          role="bold">TODO: write something</emphasis></para>
    </section>
  </section>
  <section>
    <title>Example use case: tokenization with markup</title>
    <para>In natural language processing tokenization is the process of breaking a string of
      characters up into individual words. Tokenization is done using regular expressions. Regular
      expressions however only work on textual data and not on markup. (See the famous stackoverflow
      post for reference). On top of that the tokens themselves add another layer of information to
      file/model/data/document (not sure what the right word to use is here), which can overlap with
      the already existing hierarchy in the document. A data model for text that can handle multiple
      overlapping hierarchies or layers of annotations and that allows read as well as write
      operations can help out here. During tokenization all of the markup can be put 'aside' if it
      were and the tokenizer only pays attention to the textual content. The individual token are
      markup in a separate annotation layer. The existing markup layer are only ignored during
      tokenization, and still exist in the data.</para>
  </section>
  <section>
    <title>Conclusions</title>
    <para>Tree models are top down. TAG is bottom up. LMNL is flat.</para>
  </section>
  <bibliography>
    <title>Works cited</title>
    <bibliomixed xml:id="coombs_1987" xreflabel="Coombs et al. 1987">Coombs, James H., Allen H.
      Renear, and Steven J. DeRose. <quote>Markup systems and the future of scholarly text
        processing.</quote>
      <emphasis role="ital">Communications of the association for computing machinery</emphasis>,
      30.11 (Nov. 1987): 933–47. doi:10.1145/32206.32209</bibliomixed>
    <bibliomixed xml:id="derose_2004" xreflabel="DeRose 2004">DeRose, Steven J. <quote>Markup
        overlap: a review and a horse.</quote> Extreme Markup Languages 2004.
        <link>http://xml.coverpages.org/DeRoseEML2004.pdf</link></bibliomixed>
    <bibliomixed xml:id="derose_1990" xreflabel="DeRose et al. 1990">DeRose, Steven J., David G.
      Durand, Elli Mylonas, and Allen H. Renear. <quote>What is text, really?</quote>, <emphasis
        role="ital">Journal of computing in higher education</emphasis>, 1.2 (1990): 3–26.
      doi:10.1007/BF02941632.
        <link>http://www.cip.ifi.lmu.de/~langeh/test/1990%20-%20DeRose%20-%20What%20is%20Text,%20really%3F.pdf</link></bibliomixed>
    <bibliomixed xml:id="durusau" xreflabel="Durusau and O’Donnell 2002">Durusau, Patrick and
      Matthew Brook O’Donnell. <quote>JITTs (Just-In-Time-Trees)</quote>, presentation at New York
      XML SIG, January 2002. (Slides for <quote>Just-In-Time-Trees (JITTs): Next Step in the
        Evolution of Markup?</quote>, <emphasis role="ital">InterCharge: newsletter of the
        international SGML/XML users’ group</emphasis>, 8.4 (2002): 21–26.
        <link>http://www.durusau.net/publications/NY_xml_sig.pdf</link></bibliomixed>
    <bibliomixed xml:id="erjavec_2007" xreflabel="Erjavec 2007">Erjavec, Tomaž. <quote>XML and
        overlapping hierarchies.</quote> Presentation at Tsujii Lab, Tokyo, 2007-09-01.
        <link>http://nl.ijs.si/et/talks/tsujiilab-crossing/crossing.pdf</link></bibliomixed>
    <bibliomixed xml:id="hilbert_2005" xreflabel="Hilbert, Schonefeld, and Witt 2005">Hilbert,
      Mirco, Oliver Schonefeld, and Andreas Witt. <quote>Making CONCUR work.</quote>
      <emphasis role="ital">Proceedings of Extreme Markup Languages</emphasis> 2005.
        <link>http://conferences.idealliance.org/extreme/html/2005/Witt01/EML2005Witt01.xml#Horse</link></bibliomixed>
    <bibliomixed xml:id="huitfeldt_2003" xreflabel="Huitfeldt and Sperberg-McQueen 2003">Huitfeldt,
      Claus and C. Michael Sperberg-McQueen. <quote>TexMECS. An experimental markup meta-language
        for complex documents.</quote> Revision of 5 October 2003.
        <link>http://mlcd.blackmesatech.com/mlcd/2003/Papers/texmecs.html</link></bibliomixed>
    <bibliomixed xml:id="iacob_2005" xreflabel="Iacob and Dekhtyar 2005">Iacob, Ionut Emil and Alex
      Dekhtyar. <quote>Concurrent markup hierarchies: a computer science approach.</quote>
      <link>http://tomcat-stable.hcmc.uvic.ca:8080/ach/site/xhtml.xq?id=174</link>
    </bibliomixed>
    <bibliomixed xml:id="iacob_2004" xreflabel="Iacob et al 2004">Iacob, Ionut E., Alex Dekhtyar and
      Kazuyo Kaneko. <quote>Parsing concurrent XML.</quote>
      <emphasis role="ital">Workshop on Web Information Management (WIDM’04) at ACM CIKM’04
        Proceedings</emphasis>, Washington DC., November 12, 2004, 23–30.
        <link>http://digitalcommons.calpoly.edu/csse_fac/129</link></bibliomixed>
    <bibliomixed xml:id="ide_2007" xreflabel="Ide and Suderman 2007">Ide, Nancy and Keith Suderman.
        <quote>GrAF: a graph-based format for linguistic annotations.</quote> Proceedings of the
      Linguistic Annotation Workshop, held in conjunction with ACL 2007, Prague, June 28–29, 1–8.
        <link>https://www.cs.vassar.edu/~ide/papers/LAW.pdf</link></bibliomixed>
    <bibliomixed>Marcoux, Yves. <quote>Graph characterization of overlap-only TexMECS and other
        overlapping markup formalisms.</quote> Presented at Balisage: The Markup Conference 2008,
      Montréal, Canada, August 12 - 15, 2008. In <emphasis role="ital">Proceedings of Balisage: The
        Markup Conference</emphasis> 2008. Balisage Series on Markup Technologies, vol. 1 (2008).
      DOI: 10.4242/BalisageVol1.Marcoux01.
        <link>http://www.balisage.net/Proceedings/vol1/html/Marcoux01/BalisageVol1-Marcoux01.html</link></bibliomixed>
    <bibliomixed>Marinelli, Paolo Fabio Vitali, and Stefano Zacchiroli. <quote>Towards the
        unification of formats for overlapping markup.</quote>
      <emphasis role="ital">New review of hypermedia and multimedia</emphasis>, 14.1 (2008): 57–94.
        <link>https://hal-univ-diderot.archives-ouvertes.fr/hal-00340578/document</link></bibliomixed>
    <bibliomixed xml:id="peroni_2014" xreflabel="Peroni et al. 2014">Peroni, Silvio, Francesco Poggi
      and Fabio Vitali. <quote>Overlapproaches in documents: a definitive classification (in OWL,
        2!).</quote> Presented at Balisage: The Markup Conference 2014, Washington, DC, August 5 -
      8, 2014. In <emphasis role="ital">Proceedings of Balisage: The Markup Conference 2014.
        Balisage Series on Markup Technologies</emphasis>, 13 (2014). DOI:
      10.4242/BalisageVol13.Peroni01.
        <link>https://www.balisage.net/Proceedings/vol13/html/Peroni01/BalisageVol13-Peroni01.html</link></bibliomixed>
    <bibliomixed xml:id="piez_2008" xreflabel="Piez 2008">Piez, Wendell. <quote>LMNL in miniature.
        An introduction.</quote> Amsterdam Goddag Workshop, 1–5 December 2008.
        <link>http://piez.org/wendell/LMNL/Amsterdam2008/presentation-slides.html</link></bibliomixed>
    <bibliomixed xml:id="piez_2010" xreflabel="Piez 2010">Piez, Wendell. <quote>Towards hermeneutic
        markup. An architectural outline.</quote> Presentation at Digital Humanities 2010, King’s
      College, London. <link>http://piez.org/wendell/papers/dh2010/</link> The screen shot in this
      paper is taken from
        <link>http://piez.org/wendell/papers/dh2010/clix-sonnets/ozymandias-map.svg</link>.</bibliomixed>
    <bibliomixed xml:id="piez_2014" xreflabel="Piez 2014">Piez, Wendell. <quote>Hierarchies within
        range space: From LMNL to OHCO.</quote> Presented at <emphasis role="ital">Balisage: The
        Markup Conference 2014, Washington, DC, August 5 - 8, 2014.</emphasis> In <emphasis
        role="ital">Proceedings of Balisage: The Markup Conference 2014. Balisage series on markup
        technologies,</emphasis> vol. 13 (2014). DOI: 10.4242/BalisageVol13.Piez01.
        <link>http://www.balisage.net/Proceedings/vol13/html/Piez01/BalisageVol13-Piez01.html</link></bibliomixed>
    <bibliomixed xml:id="piez_2015" xreflabel="Piez 2015">Wendell Piez, <quote>TEI in LMNL:
        implications for modeling</quote>, <emphasis role="ital">Journal of the Text Encoding
        Initiative</emphasis> [Online], Issue 8 | December 2014 - December 2015, Online since 21
      November 2015, connection on 08 March 2017. URL: <link>http://jtei.revues.org/1337</link>;
      DOI: 10.4000/jtei.1337.</bibliomixed>
    <bibliomixed xml:id="renear_1996" xreflabel="Renear, Mylonas, and Durand 1996">Renear, Allen H.,
      Elli Mylonas, and David G. Durand. <quote>Refining our notion of what text really is: the
        problem of overlapping hierarchies.</quote>
      <emphasis role="ital">Research in humanities computing</emphasis>, ed. Nancy Ide and Susan
      Hockey. Oxford: Oxford University Press. 1996.
        <link>http://cds.library.brown.edu/resources/stg/monographs/ohco.html#derose</link></bibliomixed>
    <bibliomixed xml:id="sperberg-huitfeldt_2000" xreflabel="Sperberg-McQueen and Huitfeldt 2000"
      >Sperberg-McQueen, C. M. and Claus Huitfeldt. <quote>GODDAG: a data structure for overlapping
        hierarchies.</quote>
      <emphasis role="ital">Digital documents: systems and principles: 8th international conference
        on digital documents and electronic publishing, DDEP 2000, 5th international workshop on the
        principles of digital document processing, PODDP 2000, Munich, Germany, September 13–15,
        2000, revised papers</emphasis>, ed. Peter King and Ethan V. Munson. NY: Springer, 2004,
      139–60. A revised version is available at
      <link>http://cmsmcq.com/2000/poddp2000.html</link></bibliomixed>
    <bibliomixed xml:id="sperberg-huitfeldt_2008" xreflabel="Sperberg-McQueen and Huitfeldt 2008"
      >Sperberg-McQueen, C. M. and Claus Huitfeldt. <quote>Markup Discontinued: Discontinuity in
        TexMecs, Goddag structures, and rabbit/duck grammars.</quote>
      <emphasis role="ital">Presented at Balisage: The Markup Conference 2008, Montréal, Canada,
        August 12 - 15, 2008.</emphasis> In <emphasis role="ital">Proceedings of Balisage: The
        Markup Conference 2008. Balisage Series on Markup Technologies</emphasis>, vol. 1 (2008).
      DOI: 10.4242/BalisageVol1.Sperberg-McQueen01.
        <link>http://www.balisage.net/Proceedings/vol1/html/Sperberg-McQueen01/BalisageVol1-Sperberg-McQueen01.html</link></bibliomixed>
    <bibliomixed xml:id="xmlinfoset" xreflabel="XML InfoSet">XML Information Set (second edition).
        <link>https://www.w3.org/TR/xml-infoset/</link></bibliomixed>
    <bibliomixed xml:id="xdm6" xreflabel="XDM §6">XQuery and XPath Data Model 3.1. §6. Nodes.
        <link>https://www.w3.org/TR/xpath-datamodel-3/#Node</link></bibliomixed>
  </bibliography>
</article>
