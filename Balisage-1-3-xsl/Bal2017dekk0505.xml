<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="balisage-1-3.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-stylesheet type="text/xsl" href="balisage-proceedings-html.xsl"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>It’s more than just overlap: Text As Graph</title>
  <subtitle>Refining our notion of what text really is—this time for sure!</subtitle>
  <!-- Verify that all items in bibliography are cited in body -->
  <!--
    rhd: There is one more thing that we might have to discuss: a lot of scholars when they
    hear/read the word graph think of semantic networks. It is important to stress that a
    text graph is not a semantic network. In the markup of an annotation layer it is of
    course possible to link to persons, places, organisations, events etc in a semantic
    network. The main point is that although a text graph and a semantic network are both
    networks, and they can link to each other, there are not the same. I suspect the Balisage
    crowd is more aware of this than the average  scholars but still. There are some Balisage
    papers that advocate combining XML with semantic networks. A text graph approach is still
    different from that approach. So maybe it would good to explicitly mention that to avoid
    confusion.
  -->
  <info>
    <abstract>
      <para>The XML tree paradigm has several well-known limitations for document modeling and
        processing, some of which have received a lot of attention (especially overlap; see the
        overviews in <xref linkend="sperberg-huitfeldt_2000"/>, <xref linkend="derose_2004"/>, and
          <xref linkend="peroni_2014"/>) and some of which have received less (e.g., discontinuity,
        simultaneity, transposition, white space as crypto-overlap). Many of these have
        work-arounds, also well known, that—as is implicit in the term
        <quote>work-around</quote>—have disadvantages, but because they get the job done and because
        XML has a large user community with diverse levels of technological expertise, it is
        difficult to overcome inertia and move to a technology that might offer a more comprehensive
        fit with the full range of document structures with which researchers need to interact both
        intellectually and programmatically. Proceeding from a high-level view of why XML has the
        limitations it has, this presentation explores how an alternative model of Text as Graph
        (TAG) might address these types of structures and tasks in a more natural and idiomatic way
        than is available within an XML paradigm.</para>
    </abstract>
    <author>
      <personname>
        <firstname>Ronald</firstname>
        <surname>Haentjens Dekker</surname>
      </personname>
      <personblurb>
        <para>Ronald Haentjens Dekker is a software architect and consultant at the Huygens
          Institute for the History of the Netherlands. As a software architect, he is responsible
          for translating research questions into technology or algorithms and explaining to
          researchers and management how specific technologies will influence their research. He has
          worked on transcription and annotation software, collation software, and repository
          software, and he is the lead developer of the CollateX collation tool. He also conducts
          workshops to teach researchers how to use scripting languages in combination with digital
          editions to enhance their research.</para>
      </personblurb>
      <affiliation>
        <jobtitle>Head of Research and Development and Software Architect</jobtitle>
        <orgname>Huygens ING</orgname>
      </affiliation>
      <email>ronald.dekker@huygens.knaw.nl</email>
      <link xlink:type="simple" xlink:show="new" xlink:actuate="onRequest"
        >https://www.huygens.knaw.nl/dekker/</link>
    </author>
    <author>
      <personname>
        <firstname>David</firstname>
        <othername>J.</othername>
        <surname>Birnbaum</surname>
      </personname>
      <personblurb>
        <para>David J. Birnbaum is Professor and Chair of the Department of Slavic Languages and
          Literatures at the University of Pittsburgh. He has been involved in the study of
          electronic text technology since the mid-1980s, has delivered presentations at a variety
          of electronic text technology conferences, and has served on the board of the Association
          for Computers and the Humanities, the editorial board of <emphasis role="ital">Markup
            languages: Theory and practice</emphasis>, and the Text Encoding Initiative Council.
          Much of his electronic text work intersects with his research in medieval Slavic
          manuscript studies, but he also often writes about issues in the philosophy of
          markup.</para>
      </personblurb>
      <affiliation>
        <jobtitle>Professor and Chair</jobtitle>
        <orgname>Department of Slavic Languages and Literatures, University of Pittsburgh</orgname>
      </affiliation>
      <email>djbpitt@gmail.com</email>
      <link xlink:type="simple" xlink:show="new" xlink:actuate="onRequest"
        >http://www.obdurodon.org</link>
    </author>
    <keywordset role="author">
      <keyword>graph database</keyword>
      <keyword>text as graph</keyword>
      <keyword>TAG</keyword>
      <keyword>simultaneity</keyword>
      <keyword>overlap</keyword>
      <keyword>discontinuity</keyword>
      <keyword>mixed content</keyword>
      <keyword>white space</keyword>
    </keywordset>
  </info>
  <section>
    <title>Introduction</title>
    <para>The XML tree paradigm has several well-known limitations for document modeling and
      processing, some of which have received a lot of attention (especially overlap; see the
      overviews in <xref linkend="sperberg-huitfeldt_2000"/> and <xref linkend="derose_2004"/>) and
      some of which have received less (e.g., discontinuity, simultaneity, transposition, white
      space as crypto-overlap). Many of these have work-arounds, also well known, that—as is
      implicit in the term <quote>work-around</quote>—have disadvantages, but because they get the
      job done and because XML has a large user community with diverse levels of technological
      expertise, it is difficult to overcome inertia and move to a technology that might offer a
      more comprehensive fit with the full range of document structures with which researchers need
      to interact both intellectually and programmatically. Proceeding from a high-level view of why
      XML has the limitations it has, this presentation explores how an alternative model of Text as
      Graph (TAG) might address these types of structures and tasks in a more natural and idiomatic
      way than is available within an XML paradigm.</para>
    <para>From an informatic perspective all documents are structured, including those that are
      traditionally identified as plain text. Some of the structural properties of plain-text
      documents are expressed through formatting conventions, such as the use of blank lines to
      separate paragraphs, or of indentation to mark the beginning of a paragraph, or of centering
      to mark a header. The sequence of words in a text, delimited in a complex way that involves
      white space, punctuation, and other symbols, constitutes, on a certain level, an implicit
      organizational tier above the sequence of characters.<footnote>
        <para>Others properties, often more lexical than structural, may depend on contextual
          information that is not always expressed explicitly. For example, a capitalized reference
          to <quote>London</quote> is formally marked as a proper noun by capitalization, but
          whether it is a placename in England (or Ohio or Ontario or elsewhere) or the personal
          name of a US writer is not represented formally.</para>
      </footnote> The conventions at work in plain text do not formally, completely, unambiguously,
      or in a wholly standardized way differentiate the content of a document from the coded
      representation of its structure (or, perhaps more accurately, structures), which problematizes
      using plain text for document processing (whether for data mining, publication, or other
      purposes). The challenges this poses have come to be addressed by representing the structural
      properties of a document not with plain-text characters (which might be considered
      pseudo-markup), but through standardized, formal markup, such as XML.</para>
    <para>The XML data model is an ordered tree, or, more precisely, a rooted and ordered directed
      acyclic graph that prohibits multiple parentage, which in the document-processing community
      has come to be understood as representing an Ordered Hierarchy of Content Objects (OHCO). It
      is well known that the OHCO model works well for describing structures that consist of single
      ordered hierarchies, such as the exhaustive tesselated division of a novel into chapters and
      the chapters into paragraphs, but it is not well suited to modeling structures that cannot be
      represented fully by a single tree.<footnote>
        <para>The OHCO literature is already familiar to the Balisage audience, and it is not our
          goal to provide an exhaustive bibliography. The seminal papers that advocated for OHCO as
          a document model are <xref linkend="coombs_1987"/> and <xref linkend="derose_1990"/>; the
          seminal examination of the limitations of OHCO, by some of the same authors, is <xref
            linkend="renear_1996"/> (first introduced as a conference presentation in 1992). Wendell
          Piez discusses issues pertaining to overlap and OHCO, and the alternative range model
          implemented in LMNL, in <xref linkend="piez_2014"/>.</para>
      </footnote> The markup community has focused intensively on overlapping hierarchies as a
      challenge to the OHCO model,<footnote>
        <para>Within the Balisage community, at present
            <link>http://www.balisage.net/Proceedings/topics/Concurrent_Markup~Overlap.html</link>
          lists twenty-five presentations from 2008 through 2016</para>
      </footnote> and with good reason, but we argue below that overlap is only one manifestation of
      a higher-level problem, and this perspective has implications for deciding how best to
      overcome it. If overlap were <emphasis role="ital">the</emphasis> problem, projecting multiple
      trees over the content might solve it (e.g., through the SGML <emphasis role="bold"
        >CONCUR</emphasis> feature<footnote>
        <para>See, e.g., <xref linkend="hilbert_2005"/>.</para>
      </footnote>), as might the adoption of a model that permits but does not require hierarchy,
      including multiple hierarchies, such as the range model exemplified by LMNL.<footnote>
        <para>See especially <xref linkend="piez_2014"/>.</para>
      </footnote> But if the problem is that a tree is inadequate for higher-level reasons that are
      only partially exemplified by overlap, we might have more success if we address the issue at
      that higher level. The Text As Graph model that we introduce below is not intended to be a
      solution to <quote>the overlap problem in XML</quote>; it is built around a fresh
      consideration of the textual structures, both latent and overt, that a data model will need to
      be able to represent.</para>
  </section>
  <section>
    <title>The TAG/hypergraph model for text</title>
    <!--Describe the model. Think of it as sets. The fact that Alexandria is a read-write system
        is very important.-->
    <section>
      <title>Overview</title>
      <para>The Text As Graph (TAG) data model consists of a directed property hypergraph for
        modeling text, markup (roughly comparable to XML elements), and annotations (roughly
        comparable to what XML attributes would be like if they could contain markup, including
        attributes on attributes). A hypergraph consists of a set of nodes and a set of edges and
        hyperedges. Nodes and (hyper)edges have types, and may also have other properties.</para>
      <para>Graph models for text and markup have been proposed before (GODDAG [see, e.g., <xref
          linkend="sperberg-huitfeldt_2000"/>], GrAF [see, e.g., <xref linkend="ide_2007"/>]), but
        the model advanced in this paper differs from those because it incorporates a <emphasis
          role="bold">hypergraph</emphasis>. Hypergraphs differ from traditional graphs, the edges
        of which can connect only two nodes with each other, because the edges in a hypergraph can
        connect more than two nodes with one another, and for that reason they are called <emphasis
          role="bold">hyperedges</emphasis>. Hypergraphs can have directed and undirected
        hyperedges. Undirected hyperedges contain a set of nodes, and in this paper we refer to them
        as <quote>sets</quote>. Directed hyperedges contain two non-empty sets of nodes, one for the
        source (called the <emphasis role="bold">head</emphasis>) and one for the target (called the
          <emphasis role="bold">tail</emphasis>). The direction of a (hyper)edge may be used to
        model an order or a hierarchy of the nodes, but directionality does not obligatorily imply
        either order or hierarchy. Hypergraphs are especially valuable for text modeling because
        they can be implemented using sets, and methods for reasoning over and operating on sets are
        proven and well known.</para>
      <para>Like LMNL and unlike XML, TAG is defined as a data model, rather than by its syntax. At
        present TAG does not have its own syntactic representation.</para>
    </section>
    <section>
      <title>How TAG represents selected structural properties of text</title>
      <section>
        <title>Overview</title>
        <para>This section describes in an introductory way how TAG represents order, textual
          content, markup, overlap, and discontinuity. Some of these issues are taken up in more
          detail later, after we introduce the types of nodes, edges, and hyperedges that make up
          the TAG model of text.</para>
      </section>
      <section>
        <title>Order</title>
        <para>A distinctive feature of the TAG model is that textual content is an ordered set of
          Text nodes, but Markup and Annotation nodes are not ordered. Because markup all points
          directly or through intermediaries to Text nodes, the order of Markup nodes becomes a
          derived property of the order of the Text nodes to which the markup applies.<footnote>
            <para>The same applies to Annotation nodes, which are not ordered, but which are
              attached to either Markup or other Annotation nodes. Two Markup nodes that point to
              the same Text nodes are not ordered with respect to each other, since the inferred
              order of a Markup node is a derived property of the set of Text nodes to which it is
              attached, and in this example the markup is attached to the same Text nodes. See also
              below about Markup dominance.</para>
          </footnote> This bottom-up perspective on order within a document distinguishes TAG from
          the top-down, ordered-tree perspective of XML and GODDAG, where, contrary to TAG, the
          order of nodes (including <code>Text</code> nodes) is at least partially derived, through
          depth-first traversal, from the order of their parent nodes. In this respect TAG is closer
          to LMNL, where order in the document also inheres at the lowest level, which in LMNL is
          the atoms that make up the content.</para>
      </section>
      <section>
        <title>Textual content</title>
        <para>Textual content in TAG is expressed by nodes of type Text, each of which represents a
          segment of textual content (Text nodes may also be empty). The order of the text is stored
          as directed regular (one-to-one) edges between pairs of Text nodes; this chain begins at
          the Document node, which points to the first Text node, and a single, unbroken chain
          connects all Text nodes in the document except those in annotations.<footnote>
            <para>See also the discussion of unordered content and transpositions in <xref
                linkend="to_do"/>.</para>
          </footnote> Annotations (see below), which typically encode metadata, can be understood as
          ancillary documents, and their textual content is modeled as separate chains that begin at
          the Annotation node.</para>
      </section>
      <section>
        <title>Markup</title>
        <para>Markup in XML performs four functions simultaneously: <emphasis role="bold"
            >containment</emphasis>, <emphasis role="bold">dominance</emphasis> (<emphasis
            role="bold">hierarchy</emphasis>), <emphasis role="bold">datatyping</emphasis>, and
            <emphasis role="bold">order</emphasis>. In XML, an ancestor element both <emphasis
            role="bold">contains</emphasis> (starts before and ends after) its descendants and
            <emphasis role="bold">dominates</emphasis> them (is connected to them by a path that
          travels only downward in the tree). An XML element specifies a <emphasis role="bold"
            >type</emphasis> (through the generic identifier), and it instantiates <emphasis
            role="bold">order</emphasis> because XML is defined as an ordered tree of nodes,
          including element nodes.</para>
        <para>TAG separates these four functions. As described above, <emphasis role="bold"
            >order</emphasis> in TAG is a property only of Text nodes. <emphasis role="bold"
            >Containment</emphasis> is modeled by subset relations that are independent of any
          hierarchy; it is axiomatic that a superset (of Text nodes) <emphasis role="ital"
            >contains</emphasis> all of its proper subsets. <emphasis role="bold"
            >Datatyping</emphasis> is implemented through Markup-to-Text hyperedges that point from
          a Markup node to a set of Text nodes, where the hyperedge has a <code>name</code>
          property, the value of which is comparable to the generic identifier (name) of an XML
          element. Unlike in XML, however, Markup-to-Text hyperedges do not model hierarchy; their
          only function is datatyping (and, through subset relations of their tails, containment).
          Because Text nodes can have multiple incoming hyperedges on them, textual content can have
          multiple markup on it, and because Markup-to-Text hyperedges do not form a tree, that
          situation does not engender overlap concerns. Annotations on Markup nodes provide
          supplementary information (metadata) about the node, similarly to attributes in XML,
          except that in TAG, as in LMNL, annotations can have rich content, and are not limited to
          just a name and an atomic value. (As in XML and unlike in LMNL, annotations on a Markup or
          Annotation node in TAG are unordered.)</para>
        <para>In TAG, as in LMNL, a document is not required to express a hierarchy. Where dominance
          relations must be modeled, TAG uses Markup-to-Markup hyperedges to implement a hierarchy.
          The fact that hierarchy is optional is an important distinction from XML (single
          hierarchy) and GODDAG (one or more hierarchies).</para>
        <para>Markup nodes do not contain other Markup nodes; Markup nodes identify (point to) sets
          of Text nodes, and the Text nodes may form a subset relationship. This means that in TAG
          it is not meaningful to ask whether a single set of Text nodes identified with one Markup
          node as a paragraph and with a different Markup node as a quotation represents a paragraph
          that consists of a quotation or a quotation that consists of a paragraph. Where the
          hierarchy of coextensive paragraphs and quotations matters, the relationship may be
          modeled, but as one of dominance (hierarchy), rather than of containment.</para>
        <para>The separation of these four functions means that Markup always provides datatyping,
          since Markup nodes have a <code>name</code> property. Because the target of Markup is a
          non-empty set of Text nodes, and Text nodes are ordered and have intrinsic subset
          relationships, Markup also specifies order and containment, but only indirectly. The
          specification of dominance is optional, and is entirely a property of Markup nodes.</para>
      </section>
      <section>
        <title>Overlap and self-overlap</title>
        <para>Overlap between the Text-node tails of two or more Markup-to-Text hyperedges does not
          require a special construction in TAG. Each Markup-to-Text hyperedge points to a set of
          Text nodes, and those Text-node tails may or may not overlap with one another. In the
          set-based terminology of TAG, overlap describes a relationship between sets where there is
          a non-empty intersection and neither set is a subset of the other. In this respect,
          overlap of sets of Text nodes in TAG is similar to the LMNL overlap of ranges of atoms
          (but see immediately below about discontinuity). Self-overlap (in XML terms, overlap that
          involves two elements with the same generic identifier) is not a special case in TAG
          because two Markup nodes with the same <code>name</code> property (datatype) each is the
          head of its own hyperedge. Overlap in TAG, as in LMNL, is a matter of containment, rather
          than of dominance, the two are not distinct in the XML data model, and although the GODDAG
          developers have identified the importance of the difference, it is unclear how GODDAG
          would express it. [<xref linkend="sperberg-huitfeldt_2008"/>]</para>
      </section>
      <section>
        <title>Discontinuity</title>
        <para>In XML, GODDAG, and LMNL, discontinuity is expressed with more than one element
          (XML/GODDAG) or more than one range (LMNL), and the fact that the discontinuous parts
          (with respect to hierarchical or linear structure) form a whole must be encoded
          separately. In TAG, discontinuity in the Text nodes that constitute the tail of a
          Markup-to-Text hyperedge is modeled exactly the same way as continuity because the Text
          nodes are not required to be continuous. This means there is only one Markup node for all
          the Text nodes in an instance of discontinuous markup, and no obligatory partitioning into
          segments that would then require subsequent reunification (higher in the hierarchy in
          GODDAG, in the limen and with coindexed annotation values in LMNL) is needed.</para>
      </section>
    </section>
    <section>
      <title>TAG example</title>
      <figure xml:id="shakespeare_hypergraph">
        <title>William Shakespeare, Sonnet 71</title>
        <mediaobject>
          <imageobject>
            <imagedata format="png" fileref="shakespeare-sonnet-71_hypergraph.png"/>
          </imageobject>
        </mediaobject>
        <caption>
          <para>The Document node is beige, the Text nodes are pink, and the Markup nodes are green
            (those with the Name property value of <quote>quatrain</quote> or
            <quote>couplet</quote>) and cyan (those with the Name property value of
              <quote>line</quote>). A chain of regular (one-to-one) edges, represented by solid
            black arrowheads, begins at the Document node and connects the Text nodes in order. Text
            nodes in this case are entire lines of text, but they could also be smaller units; see
            the discussion of Overlap, below.</para>
        </caption>
      </figure>
      <para>The illustration of a TAG hypergraph of William Shakespearea’s Sonnet 71 (<xref
          linkend="sonnet-71_text"/>), above, includes a Document node, fourteen Text nodes, and
        eighteen Markup nodes (fourteen with their Name property value equal to <quote>line</quote>,
        three to <quote>quatrain</quote>, and one to <quote>couplet</quote>). Regular (one-to-one)
        edges start at the Document node and chain all Text nodes in textual order. Hyperedges point
        from the Markup nodes into sets of Text nodes. In this case, hyperedges that start in Markup
        nodes with the Name property of <quote>line</quote> happen to point to a set that consists
        of a single Text node, and those with Name property values of <quote>quatrain</quote> and
          <quote>couplet</quote> happen to point to sets of four and two Text nodes, respectively.
        Note that in TAG, in contrast to XML, a Markup node corresponding to the XML root element,
        although permitted, is not required, and we’ve omitted it here. Also in contrast to XML, the
          <quote>quatrain</quote> and <quote>couplet</quote> Markup nodes point directly to the Text
        nodes, and not to <quote>line</quote> Markup nodes (although that, too, is possible; see
        below about hierarchy).</para>
    </section>
    <section>
      <title>TAG components</title>
      <section>
        <title>Nodes</title>
        <para>The following types of nodes are supported by TAG:<itemizedlist>
            <listitem>
              <para><emphasis role="bold">Document nodes.</emphasis> Each Document node represents a
                single document stored in the graph. It is connected by a regular edge to the first
                Text node in the document. Document nodes have no properties other than the
                  <code>type</code> property value of <quote>document</quote>.</para>
            </listitem>
            <listitem>
              <para><emphasis role="bold">Text nodes.</emphasis> The textual content of a TAG
                document is stored in one or more Text nodes, roughly comparable to XML
                  <code>Text</code> nodes. The order of the Text nodes is represented by directed
                edges that connect them in textual order.<footnote>
                  <para>All main text in the document forms a single chain of Text nodes, and the
                    same is true of the Text in an annotation. See also <xref linkend="to_do"/> for
                    a discussion of simultaneous text and contradictory order.</para>
                </footnote> The first Text node can be recognized because there is a link to it from
                the Document node. The <code>value</code> of a Text node is the text it represents,
                comparable to the string value of an XML Text node. Text nodes in TAG may be empty;
                pointing from a Markup node to an empty Text node provides functionality comparable
                to that of empty elements in XML.<footnote>
                  <para>Empty elements play a smaller roll in TAG than in XML because TAG does not
                    problematize overlap. This means that it does not need to create empty elements
                    to simulate the start and end tags of a subordinate hierarchy, as is the case in
                    some XML markup strategies.</para>
                </footnote></para>
              <para>The simplest TAG document has only a Document node and a single Text node. The
                text of the document is subdivided into Text nodes to support their association with
                different Markup nodes. As in the XML tree, TAG Text nodes are made up of
                characters, but the characters are not types in the TAG data model, and TAG has no
                counterpart to LMNL atoms.<footnote>
                  <para>The XML DOM and XDM include Text nodes in the model. The XML InforSet has no
                    Text nodes, but regards the individual character as an information item:
                      <quote>Each character is a logically separate information item, but XML
                      applications are free to chunk characters into larger groups as necessary or
                      desirable.</quote>
                    <xref linkend="W3C_xmlinfoset"/></para>
                </footnote></para>
            </listitem>
            <listitem>
              <para><emphasis role="bold">Markup nodes.</emphasis> Markup nodes correspond roughly
                to element nodes in XML, and each instance of markup is represented by its own node.
                The only property of a Markup node is a <code>name</code>, which is analogous to the
                XML generic identifier. Markup nodes are connected to the one or more text Nodes by
                a hyperedge, where the Markup node is the head and a set of Text nodes is the tail.
                There is no requirement that the Text nodes in the tail of a Markup-to-Text
                hyperedge be continuous.</para>
            </listitem>
            <listitem>
              <para><emphasis role="bold">Annotation nodes.</emphasis> Annotation nodes represent
                metadata about the targets of Markup nodes, and are thus similar to the way
                attributes represent properties of elements in XML. The <code>name</code> property
                of an Annotation node is analogous to the name of an XML attribute. As with LMNL
                annotations and unlike XML attributes, Annotation nodes may have content that
                includes markup, there may be annotations on annotations, and there may be multiple
                annotations with the same name on a single Markup or Annotation node. Unlike LMNL
                but like XML attributes, annotations are unordered (but if they contain Text nodes,
                those are connected by regular, one-to-one edges that form them into a chain,
                beginning at the Annotation node). The Shakespearean sonnet example above does not
                contain any Annotation nodes.</para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <section>
        <title>Edges and hyperedges</title>
        <section>
          <title>Overview</title>
          <para>The following edge relationships are supported by the model. All edges are directed;
            some are regular (one-to-one) edges and others are hyperedges. By definition, a directed
            hyperedge points from one non-empty set of nodes (the head) to another non-empty set of
            nodes (the tail). In TAG, all hyperedges have exactly one node in the head and one or
            more nodes in the tail except for Annotation-to-Markup hyperedges, which have one or
            more nodes in the head and exactly one node in the tail. Edges and hyperedges have an
            optional <code>type</code> property.<footnote>
              <para>Annotation hyperedges point from the Annotations to the thing being annotated
                because we think of adding annotations to markup similarly to adding markup to
                text.</para>
            </footnote></para>
        </section>
        <section>
          <title>Edges that express order</title>
          <para>Text nodes are ordered with the following regular (one-to-one) edge relationships,
            and constitute the only ordered sets in TAG:<itemizedlist>
              <listitem>
                <para><emphasis role="bold">Text-to-Text directed edges.</emphasis> Text nodes are
                  connected with directed edges, which chain and therefore order them, so that the
                  linear order of the text is preserved. In the Shakespearean sonnet example above,
                  Text-to-Text directed edges point from the first Text node to the second, from the
                  second and third, etc., until the end of the text.</para>
              </listitem>
              <listitem>
                <para><emphasis role="bold">Document-to-Text directed edges.</emphasis> A
                  Document-to-Text directed edge points from the Document node to the first Text
                  node contained in that document. In the Shakespearean sonnet example above, a
                  single Document-to-Text directed edge points from the Document node to the first
                  Text node, which in this case represents the first line of the poem.</para>
              </listitem>
              <listitem>
                <para><emphasis role="bold">Annotation-to-Text directed edges.</emphasis>
                  Annotations can be conceptualized as ancillary documents, and, like documents,
                  they may contain text, which is represented as a chain of Text nodes. Analogously
                  to the use of Document-to-Text directed edge to point to the first Text node in
                  the main document, an Annotation-to-Text directed edge points from an Annotation
                  node to the first Text node contained in that annotation. This Text node is part
                  of the Text of the annotation, and not of the Text being annotated. Separating the
                  Text nodes in the document from those in the annotations is comparable to the fact
                  that the values of attribute nodes in XML are not part of the string value of the
                  document node. Text in an annotation, like the main document text, may be marked
                  up with Markup nodes, which is to say that the Text nodes of an annotation may
                  serve as the tail of the Markup-to-Text hyperedges described below.</para>
              </listitem>
            </itemizedlist></para>
        </section>
        <section>
          <title>Hyperedges that specify and type sets of Text nodes</title>
          <para>
            <itemizedlist>
              <listitem>
                <para><emphasis role="bold">Markup-to-Text directed hyperedges.</emphasis>
                  Markup-to-Text hyperedges connect a single Markup node (head) to a set of Text
                  nodes (tail). In the Shakespearean sonnet example above, fourteen Markup-to-Text
                  hyperedges each point from a single Markup node with a <code>name</code> property
                  value of <quote>line</quote> to a set of one Text node, three Markup-to-Text
                  hyperedges with a <code>name</code> property value of <quote>quatrain</quote> each
                  point to a set of four Text nodes, and one Markup-to-Text hyperedge with a
                    <code>name</code> property value of <quote>couplet</quote> points to a set of
                  two Text nodes. Note that the <quote>quatrain</quote> and <quote>couplet</quote>
                  Markup nodes point to Text nodes, and not to the <quote>line</quote> Markup nodes
                  (although Markup-to-Markup hyperedges can be added if that is needed). This is an
                  important difference from the XML tree structure, where Text nodes would be the
                  children of <code>&lt;line></code> elements, but not of the
                    <code>&lt;quatrain></code> and <code>&lt;couplet></code> elements.</para>
              </listitem>
            </itemizedlist></para>
        </section>
        <section>
          <title>Hyperedges that express targets of annotation</title>
          <para><itemizedlist>
              <listitem>
                <para><emphasis role="bold">Annotation-to-Markup directed hyperedges.</emphasis>
                  Annotation-to-Markup directed hyperedges point from a set of Annotation nodes to
                  the Markup node that they are annotating. </para>
              </listitem>
              <listitem>
                <para><emphasis role="bold">Annotation-to-Annotation directed hyperedges.</emphasis>
                  These make it possible to add annotations to annotations, that is, to represent
                  metadata about annotations. This feature is borrowed from LMNL. As with
                  Annotation-to-Markup hyperedges, the head is the set of annotations being added,
                  and in this case the tail is Annotation node (rather than Markup node) to which
                  they are being added.</para>
              </listitem>
            </itemizedlist>
          </para>
        </section>
        <section>
          <title>Hyperedges that express dominance</title>
          <para><itemizedlist>
              <listitem>
                <para><emphasis role="bold">Markup-to-Markup directed hyperedges.</emphasis>
                  Markup-to-Markup hyperedges connect a single Markup node (head) to a set of Markup
                  nodes (tail). The Shakespearean sonnet example above does not include any
                  Markup-to-Markup hyperedges, but if we wished to encode, for example, that a
                  quatrain dominates its lines hierarchically, and does not merely contain their
                  Text nodes, we could express that with a Markup-to-Markup hyperedge between a
                    <quote>quatrain</quote> Markup node (head) and its four <quote>line</quote>
                  Markup nodes (tail).</para>
              </listitem>
            </itemizedlist></para>
        </section>
      </section>
      <section>
        <title>Constraints</title>
        <para>Only the following types of edges are permitted:</para>
        <table>
          <tr>
            <th colspan="2" rowspan="2"/>
            <th colspan="4" align="center">Head</th>
          </tr>
          <tr>
            <th>Document</th>
            <th>Text</th>
            <th>Markup</th>
            <th>Annotation</th>
          </tr>
          <tr>
            <th rowspan="4" valign="middle">Tail</th>
            <th>Document</th>
            <td>-</td>
            <td>-</td>
            <td>-</td>
            <td>-</td>
          </tr>
          <tr>
            <th>Text</th>
            <td>edge</td>
            <td>edge</td>
            <td>hyperedge</td>
            <td>edge</td>
          </tr>
          <tr>
            <th>Markup</th>
            <td>-</td>
            <td>-</td>
            <td>hyperedge</td>
            <td>hyperedge</td>
          </tr>
          <tr>
            <th>Annotation</th>
            <td>-</td>
            <td>-</td>
            <td>-</td>
            <td>hyperedge</td>
          </tr>
        </table>
        <para>An implementation must raise an error if:<itemizedlist>
            <listitem>
              <para>a document contains any type of node, regular (one-to-one) edge, or hyperedge
                not included in the preceding table</para>
            </listitem>
            <listitem>
              <para>a document does not have a single Document node, which points to a single Text
                node</para>
            </listitem>
            <listitem>
              <para>a document does not have at least one Text node</para>
            </listitem>
            <listitem>
              <para>a Document node points to anything other than a single Text node</para>
            </listitem>
            <listitem>
              <para>a Text node points to anything other than another single Text node</para>
            </listitem>
            <listitem>
              <para>there is not exactly one Text node in the main text and in the text of every
                annotation that does not point to another Text node, except that an Annotation is
                not required to have text.</para>
            </listitem>
            <listitem>
              <para>two contiguous Text nodes are in the tail of all of the same Markup-to-Text hyperedges<footnote>
                  <para>In this case, they should be merged into a single Text node. This is
                    comparable to the XML prohibition against Text nodes that are nearest siblings
                    of other Text nodes. One difference is that in TAG, nearest-sibling Text nodes
                    are permitted in the tail of a Markup-to-Text hyperedge as long as one of them
                    is also in the tail of at least one other Markup-to-Text hyperedge.</para>
                </footnote></para>
            </listitem>
            <listitem>
              <para>a regular (one-to-one) edge from an Annotation node points to anything other
                than a single Text node</para>
            </listitem>
            <listitem>
              <para>a Text node is not part of a continuous chain that begins at a Document node or
                Annotation node </para>
            </listitem>
            <listitem>
              <para>a Markup node is not the head of exactly one Markup-toText hyperedge</para>
            </listitem>
            <listitem>
              <para>a Markup-to-Text hyperedge has anything other than a single Markup node in its
                head and anything other than a non-empty set of Text nodes in its tail</para>
            </listitem>
            <listitem>
              <para>a Markup-to-Markup hyperedge has anything other than a single Markup node in its
                head and anything other than a non-empty set of Markup nodes in its tail</para>
            </listitem>
            <listitem>
              <para>the head of a hyperedge contains anything other than a single Markup node or a
                non-empty set of Annotation nodes</para>
            </listitem>
            <listitem>
              <para>the tail of a hyperedge contains anything except a non-empty set of Text nodes
                (Markup-to-Text hyperedge), a non-empty set of Markup nodes (Markup-to-Markup
                hyperedge), or a single Markup or Annotation node (Annotation-to-Markup and
                Annotation-to-Annotation hyperedge)</para>
            </listitem>
            <listitem>
              <para>the tail of a regular edge is anything other than a Text node or a Document
                node</para>
            </listitem>
            <listitem>
              <para>the head or tail of a hyperedge is empty or contains nodes that are not all of
                the same type</para>
            </listitem>
            <listitem>
              <para>any two edges or hyperedges have the same type, the same head, and the same
                tail</para>
            </listitem>
            <listitem>
              <para>an Annotation or Markup node does not have a name</para>
            </listitem>
          </itemizedlist></para>
      </section>
    </section>
  </section>
  <section>
    <title>Challenges for text modeling</title>
    <para>In this section we illustrate several types of textual structures that have proven awkward
      for XML because they contradict or otherwise are not part of the OHCO tree model. For each we
      provide an abstract description of the problem, of one or more XML workarounds, and their
      GODDAG and LMNL counterparts (as appropriate), illustrated with examples drawn from use cases
      in Digital Humanities research projects.</para>
    <!-- Michael and Claus 2008 emphasize that TEI markup requires semantics, while ours is in the model
      TexMECS has a strategy for this, while LMNL doesn't; do we need a TexMECS parser -->
    <!-- TexMECS requires quotations to be divided in the model, while we don't -->
    <section>
      <title>Overlap</title>
      <para>The challenge to text modeling in XML that has attracted the most attention is overlap.
        For example, notice in the image below how the phrase <quote>Two vast and trunkless legs of
          stone Stand in the desart</quote> begins in the middle of line 2 and ends in the middle of
        line 3, an absence of synchronicity between verse lines and sentences that is called
          <emphasis role="ital">enjambment</emphasis>.<footnote>
          <para>In this example we have tagged phrases, rather than sentences, but since phrases are
            constituents of sentences, a phrase break that crosses a metrical line boundary normally
            also entails a sentence break, and therefore an enjambment.</para>
        </footnote> :</para>
      <figure xml:id="ozymandias">
        <title>Percy Bysshe Shelley, <quote>Ozymandias</quote></title>
        <mediaobject>
          <imageobject>
            <imagedata format="png" fileref="ozymandias.png"/>
          </imageobject>
        </mediaobject>
        <caption>
          <para>[Image from
              <link>http://piez.org/wendell/papers/dh2010/clix-sonnets/ozymandias-map.svg</link>,
            which is part of <xref linkend="piez_2010"/>. The overlap is easier to see in the
            original SVG, which is animated, and highlights portions of the document in response to
            mouse events.]</para>
        </caption>
      </figure>
      <para>Piez’s illustration is actually of LMNL ranges, rather than of XML element trees. The
        same structure might be visualized as independent overlapping trees as follows, where cyan
        represents the tree of metrical lines and green represents the tree of linguistic
        phrases:</para>
      <figure xml:id="ozymandias_trees">
        <title>Percy Bysshe Shelley, <quote>Ozymandias</quote></title>
        <mediaobject>
          <imageobject>
            <imagedata format="png" fileref="ozymandias_trees.png"/>
          </imageobject>
        </mediaobject>
        <caption>
          <para>Projecting two independent trees over a common set of words. In XML the individual
            words would be not be children of <code>&lt;line&gt;</code> and
              <code>&lt;phrase&gt;</code> elements, and would instead be grouped inside
              <code>Text</code> node children of those elements.</para>
        </caption>
      </figure>
      <para>Because it is not possible to represent the preceding structure in XML markup, the
        following pseudo-XML is not well-formed:</para>
      <programlisting>&lt;line&gt;&lt;phrase&gt;Who said —&lt;/phrase&gt; &lt;phrase&gt;“Two vast and trunkless legs of stone&lt;/line&gt;
&lt;line&gt;Stand in the desart….&lt;/phrase&gt; &lt;phrase&gt;Near them,&lt;/phrase&gt; &lt;phrase&gt;on the sand&lt;/phrase&gt;&lt;/line&gt;</programlisting>
      <para>New XML users often misunderstand the prohibition against overlap as a prohibition
        against overlapping <emphasis role="ital">tags</emphasis>, but if that were the entire
        issue, it could be remedied by simply removing the syntactic prohibition. But the rule about
        tags exists because tags must represent the data model, the hierarchy in the data model
        prohibits multiple parentage, and overlap would permit a node to have more than one parent.
        Overlap is possible in GODDAG only incidentally because TexMECS permits overlapping tags; at
        a higher level it is because GODDAG permits <code>Text</code> nodes to have multiple parents
        and TexMECS serializes the GODDAG model. LMNL sawtooth syntax may look like XML syntax with
        the prohibition against overlapping tags removed, but the real difference is at the level of
        the data model: LMNL <emphasis role="ital">ranges</emphasis> can overlap and XML tags cannot
        because the content between XML start and end tags is a sequence of descendant <emphasis
          role="ital">nodes in a tree</emphasis>, and not a <emphasis role="ital">range of textual
          atoms</emphasis>.</para>
      <para>TAG represents overlap naturally because the TAG counterpart to an XML element is a
        directed hyperedge that associates a head Markup node with a set of tail Text nodes. To tag
        a line of poetry in the example above, TAG would create a hyperedge from a Markup node with
        the <code>name</code> property value of <quote>line</quote> (comparable to a
          <code>&lt;line&gt;</code> element in XML) to a set of Text nodes (comparable to
          <code>Text</code> nodes in XML). Sets are unordered, but because the TAG model requires
          <quote>sequence</quote> edges between Text nodes, which record the continuous order of the
        text stream (comparable to the sequence of atoms in the LMNL model), the textual content of
        the line is fully specified by (= can be retrieved by examining) the membership of the set
        of tail Text nodes and the sequence edges between them. In the illustration below, the black
        arrows represent regular edges that connect Text nodes in order, the irregular colored
        bounding lines demarcate the sets of tail Text nodes, and a similarly colored arrow points
        into them from their Markup node heads:</para>
      <figure xml:id="overlap_hypergraph">
        <title>Percy Bysshe Shelley, <quote>Ozymandias</quote></title>
        <mediaobject>
          <imageobject>
            <imagedata format="png" fileref="ozymandias_hypergraph.png"/>
          </imageobject>
        </mediaobject>
        <caption>
          <para>A hypergraph representing overlap of phrases and metrical lines.</para>
        </caption>
      </figure>
      <para>Additional use cases involving overlap challenges in XML include pages vs paragraphs in
        publications of novels, folios vs texts in medieval manuscripts, and speeches vs metrical
        lines in drama. Overlap in poetic structures has been explored in detail in <xref
          linkend="piez_2014"/>, which also discusses an unusual structural paradox involving
        Chapter 24 of Mary Shelley’s <emphasis role="ital">Frankenstein</emphasis>. Overlap
        involving word and metrical foot boundaries in poetry are discussed below.</para>
    </section>
    <section>
      <title>Discontinuity</title>
      <para><xref linkend="sperberg-huitfeldt_2008"/> discusses the following paragraph from Lewis
        Carroll’s <emphasis role="ital">Alice in Wonderland</emphasis> as an example of
        discontinuity:</para>
      <blockquote>
        <para>Alice was beginning to get very tired of sitting by her sister on the bank, and of
          having nothing to do: once or twice she had peeped into the book her sister was reading,
          but it had no pictures or conversations in it, <quote>and what is the use of a
            book,</quote> thought Alice <quote>without pictures or conversation?</quote></para>
      </blockquote>
      <para>There is no way to mark up this passage in XML without fragmenting the quotation into
        two elements (and relying on semantics to stitch together the pieces in the application
        layer), yet our human intuition is that there is a single quotation, and that the model,
        therefore, should represent it as a single object.<footnote>
          <para>It is possible to interpret the content of the <code>&lt;quotation></code> element
            as three child nodes: a <code>Text</code> node, an intervening element that holds the
            narrative interjection, and then another <code>Text</code>, and in that sense the
            quotation is one object, although that object incorporates something that is not part of
            what a human understands as the quotation. <xref linkend="sperberg-huitfeldt_2008"/>
            explains why this is unsatisfactory (see especially their footnote 2).</para>
        </footnote> As <xref linkend="sperberg-huitfeldt_2008"/> also observe, there is a sense in
        which <quote>book</quote> and <quote>without</quote> are adjacent and a different sense in
        which <quote>book</quote> and <quote>thought</quote> are adjacent. The XML data model cannot
        represent both of these realities simultaneously, which means that at least one of them must
        be handed off to the application layer.</para>
      <para>
        <xref linkend="sperberg-huitfeldt_2008"/> situate this type of structure in a GODDAG
        context, where it intersects with the distinction between <emphasis role="ital"
          >containment</emphasis> and <emphasis role="ital">dominance</emphasis>. Concerning LMNL,
        they write that </para>
      <blockquote>
        <para>[with respect to] the unity of discontinuous elements: such a unity may be asserted by
          the application layer (that is, by the definition of a LMNL vocabulary), but it is not
          visible on the LMNL level, and thus need not be accounted for at the level of LMNL
          itself.</para>
        <para>The design of LMNL thus seems to require that any account of dominance (as distinct
          from containment), and any account of discontinuous elements, be handled in the
          application layer. LMNL itself achieves a degree of simplicity and regularity as a result,
          at the expense of complexity in the application.</para>
      </blockquote>
      <para><xref linkend="piez_2008"/> describes discontinuity in LMNL as modeled by the <emphasis
          role="ital">limen</emphasis>, where the example provided
          (<link>http://piez.org/wendell/LMNL/Amsterdam2008/presentation-slides.html#page23</link>)
        records it through coindexed annotations. That dependency seems to locate discontinuity in
        an application layer, since whether coindexed annotations represent discontinuity is not an
        inherent property of the coindexing.</para>
      <para>TAG prioritizes the representation of text structures, including discontinuity, in the
        model, without dependency on application-layer semantics. The example from Alice in
        Wonderland described above would have the following form in TAG:</para>
      <figure xml:id="discontinuity_hypergraph">
        <title>Lewis Carroll, <quote>Alice in Wonderland</quote></title>
        <mediaobject>
          <imageobject>
            <imagedata format="png" fileref="discontinuity_hypergraph.png"/>
          </imageobject>
        </mediaobject>
        <caption>
          <para>Each hyperedge points from a markup node head (identifying the type of text
            structure) to a tail set of text nodes. Normal edges connect the text nodes in
            order.</para>
          <para>In the TAG model, a discontinuous textual object is represented the same way as a
            continuous one, as an ordered set of Text nodes that form the tail of a Markup-to-Text
            hyperedge.</para>
        </caption>
      </figure>
    </section>
    <section>
      <title>Hierarchy, containment and dominance</title>
      <para>The challenges that have emerged from our experience of XML as a model of text involve
        not only the <emphasis role="ital">limitations</emphasis> of OHCO, but also its <emphasis
          role="ital">tyranny</emphasis>. If text is understood as an Ordered Hierarchy of Content
        Objects, are there aspects of text that are not ordered (O), are there aspects that are not
        hierarchical (H, by which we mean not just that they are not mono-hierarchical, but that
        they are not hierarchical at all), and does the model create content objects artifactually,
        that is, where they are not perceived as inherent properties of the text being modeled (CO)?
        XML requires us to model all content as both ordered and hierarchical, and it represents
        content objects as elements (at least as content objects are described in <xref
          linkend="derose_1990"/>). GODDAG and LMNL both grew out of a recognition that not all
        properties of text can be modeled effectively as a single hierarchy, and their focus is not
        limited to that issue, but they differ in the extent to which they interrogate features of
        text that may not be hierarchical, that may not be ordered, and that may not involve what a
        human would consider a content object.</para>
      <para>As was mentioned earlier, the XML data model does not distinguish containment from
        dominance, which Tennison explains and illustrates as follows: <blockquote>
          <para>Containment is a happenstance relationship between ranges while dominance is one
            that has a meaningful semantic. A page may happen to <emphasis role="ital"
              >contain</emphasis> a stanza, but a poem <emphasis role="ital">dominates</emphasis>
            the stanzas that it contains.[<xref linkend="tennison_2008"/>]</para>
        </blockquote></para>
      <para>In XML, an ancestor element both <emphasis role="bold">contains</emphasis> (starts
        before and ends after in the serialization) its descendants and <emphasis role="bold"
          >dominates</emphasis> them (is connected to them by a path that travels only downward in
        the tree). In the XML view below of the Shakespearean sonnet the we used as a TAG example
        above, the <code>&lt;poem></code> element both contains and dominates three
          <code>&lt;quatrain></code> elements and one <code>&lt;couplet></code> element, and the
          <code>&lt;quatrain></code> and <code>&lt;couplet></code> elements both contain and
        dominate <code>&lt;line></code> elements:</para>
      <programlisting>&lt;poem&gt;
    &lt;quatrain&gt;
        &lt;line&gt;No longer mourn for me when I am dead&lt;/line&gt;
        &lt;line&gt;Than you shall hear the surly sullen bell&lt;/line&gt;
        &lt;line&gt;Give warning to the world that I am fled&lt;/line&gt;
        &lt;line&gt;From this vile world with vilest worms to dwell:&lt;/line&gt;
    &lt;/quatrain&gt;
    &lt;quatrain&gt;
        &lt;line&gt;Nay, if you read this line, remember not&lt;/line&gt;
        &lt;line&gt;The hand that writ it, for I love you so,&lt;/line&gt;
        &lt;line&gt;That I in your sweet thoughts would be forgot,&lt;/line&gt;
        &lt;line&gt;If thinking on me then should make you woe.&lt;/line&gt;
    &lt;/quatrain&gt;
    &lt;quatrain&gt;
        &lt;line&gt;O! if,—I say you look upon this verse,&lt;/line&gt;
        &lt;line&gt;When I perhaps compounded am with clay,&lt;/line&gt;
        &lt;line&gt;Do not so much as my poor name rehearse;&lt;/line&gt;
        &lt;line&gt;But let your love even with my life decay;&lt;/line&gt;
    &lt;/quatrain&gt;
    &lt;couplet&gt;
        &lt;line&gt;Lest the wise world should look into your moan,&lt;/line&gt;
        &lt;line&gt;And mock you with me after I am gone.&lt;/line&gt;
    &lt;/couplet&gt;
&lt;/poem&gt;</programlisting>
      <figure xml:id="shakespeare_xml">
        <title>William Shakespeare, Sonnet 71</title>
        <mediaobject>
          <imageobject>
            <imagedata format="png" fileref="shakespeare-sonnet_xml.png"/>
          </imageobject>
        </mediaobject>
        <caption>
          <para>The XML tree encodes containment and hierarchy in the same way.</para>
        </caption>
      </figure>
      <para>In the earlier TAG example of this sonnet, a Markup-to-Text hyperedge defines the tail
        as a set of Text nodes and labels (datatypes) it. In the TAG version of this example, all
        quatrain and line Markup-to-Text edges point to sets of Text nodes, and containment is
        modeled by subset relations among the tails of Markup nodes. Where the Text nodes that
        constitute the tail of a Markup-to-Text hyperedge with the <code>name</code> property of
          <quote>line</quote> form a subset of the Text nodes that constitute the tail of a
        Markup-to-Text edge with the <code>name</code> property of <quote>quatrain</quote>, the
        quatrain contains the line.<footnote>
          <para>Note that the quatrain Markup node does not contain or have any other direct
            relationship to the line Markup node. It is the set of Text nodes of the quatrain that
            contains the set of Text nodes of the line.</para>
        </footnote> In this emphasis on containment, rather than dominance, TAG is similar to flat
        LMNL, except that LMNL ranges must be continuous (LMNL handles discontinuity separately),
        while contiguity is not relevant in defining the set of Text nodes that may serve as the
        tail of a hyperedge in TAG (see the discussion of Discontinuity, above). In the TAG version
        we have chosen not to make the three quatrains and the couplet what in XML terms would be
        children of a root <code>&lt;poem&gt;</code> element, but we could, should we wish, create a
        Markup-to-Text hyperedge with a <code>name</code> property value of <quote>poem</quote>
        (which would point, through a hyperedge, to the set of all Text nodes in the poem), and,
        optionally, add a one-to-many Markup-to-Markup hyperedge from it to the Markup nodes with
          <quote>quatrain</quote> and <quote>couplet</quote>
        <code>name</code> property values to specify dominance. In other words, Markup-to-Text nodes
        model containment, rather than dominance (indirectly, through subset properties of the Text
        nodes to which they point), and where it is important to distinguish dominance from
        containment, the TAG model supports this through Markup-to-Markup hyperedges.</para>
      <para>One final consequence of the XML conflation of containment and dominance is that when
        exactly the same text must be tagged in two ways simultaneously, XML requires one of the
        elements to contain the other. But, as was noted above, if a Markup node with the
          <code>name</code> property value of <quote>paragraph</quote> and a Markup node with the
          <code>name</code> property value of <quote>quotation</quote> both point to exactly the
        same set of Text nodes, in TAG it does not make sense to ask whether the paragraph contains
        the quotation or the quotation contains the paragraph because containment in TAG is defined
        as a proper subset relationship among sets of Text nodes. Whether a paragraph consists of a
        quotation or a quotation consists of a paragraph is a reasonable question, but in TAG it is
        a question of dominance, expressed through Markup-to-Markup nodes, and not of containment,
        expressed through Markup-to-Text nodes.</para>
    </section>
    <section>
      <title>Artifactual hierarchy</title>
      <para>As we described above, in XML, markup is (among other things) a form of datatyping, and
        the XML spec uses the word <quote>type</quote> to say this:<blockquote>
          <para>Each element has a type, identified by name, sometimes called its <quote>generic
              identifier</quote> (GI) [<xref linkend="W3C_xml"/> §3]</para>
        </blockquote>This means that when XML assigns a type to part of a document by making it an
        element, it simultaneously creates an element node, which pushes the textual content down a
        level in the document hierarchy. Consider the following XML structure, represented here in
        markup and as hierarchy:</para>
      <programlisting>&lt;title&gt;&lt;name&gt;Romeo&lt;/name&gt; and &lt;name&gt;Juliet&lt;/name&gt;&lt;/title&gt;</programlisting>
      <figure xml:id="romeo_xml">
        <title>Romeo and Juliet (XML)</title>
        <mediaobject>
          <imageobject>
            <imagedata format="png" fileref="romeo_xml.png"/>
          </imageobject>
        </mediaobject>
        <caption>
          <para>In XML, the three words of the title are spread over two levels of the hierarchy.
            Cyan ellipses are element nodes and pink rectangles are <code>Text</code> nodes.</para>
        </caption>
      </figure>
      <para>If we wish to specify in XML that the first and third words of the title are of type
          <quote>name</quote>, we can tag them as elements of that type, with the result that the
          <code>Text</code> nodes they contain wind up on a different level of the hierarchy than
        the conjunction between them.<footnote>
          <para>It is possible to tag the conjunction, as well, so as to push the word
              <quote>and</quote> down to the same hierarchical level as the names, but we have not
            observed that in practice. If the markup process involves tagging what the user
            considers informational, it should be possible to say that some text in this title is of
            a particular type <emphasis role="ital">that we care about sufficiently to specify it in
              our markup</emphasis>, and other text is not, and to tag the former, but not the
            latter.</para>
        </footnote> This contradicts our intuition that the title contains three words, two of which
        have the type <quote>name</quote>, replacing it with a model in which the title contains two
        objects of type <quote>name</quote> with a word between them, and it is the
          <quote>name</quote> objects that contain the first and third words.</para>
      <para>Because TAG separates the use of markup in hierarchy and its use for datatyping, it is
        possible to assign a type to text without distorting the hierarchy. Here is the TAG
        representation of the same content:</para>
      <figure xml:id="romeo_hypergraph">
        <title>Romeo and Juliet (TAG)</title>
        <mediaobject>
          <imageobject>
            <imagedata format="png" fileref="romeo_hypergraph.png"/>
          </imageobject>
        </mediaobject>
        <caption>
          <para>In this TAG example, the markup on names specifies their type without imposing a
            hierarchy. The title contains three text nodes, represented by pink ellipses. Markup
            nodes are green (for names) and cyan (for titles), and the document node is
            beige.</para>
        </caption>
      </figure>
      <para>As illustrated in the example above, markup of text nodes in the TAG model, unlike in
        XML, does not create a hierarchical layer as a side effect of datatyping. As we have seen
        earlier, it is possible to represent hierarchy in TAG, but it is not an inescapable
        consequence of all markup, as it is in XML.</para>
    </section>
    <section>
      <title>White space as crypto-overlap</title>
      <para>In natural language processing tokenization is the process of breakup a string of plain
        text characters into substrings (words), often while removing token separators in the
        process. Tokenization in XML is performed using regular expressions and the
          <code>tokenize()</code> function, but <code>tokenize()</code> atomizes its first argument,
        which means that it cannot be used on tagged text without losing the markup in the process.
        Even tokenization that would not create overlap-based well-formedness violations, such
        splitting into words a line of poetry in which the stressed vowels are tagged as
          <code>&lt;stress></code>, requires intermediate temporary manipulations, such as
        converting the markup to text, tokenizing with <code>tokenize()</code>, and then converting
        the temporary text back into markup, or adding additional markup, tokenizing with
          <code>&lt;xsl:for-each-group></code>, and then removing the temporary markup.</para>
      <para>The reason tokenizing tagged text is awkward in XML even where overlap is not a risk is
        that the markup and text are intertwined in a way that makes it impossible to ignore markup
        during tokenization while retaining access to it after the process is complete. Although it
        is not usually described this way, the use of white space to separate words is may be
        understood as pseudo-markup, which means that the words in tagged text potentially represent
        overlapping hierarchies.<footnote>
          <para>See <quote>Mixed content as a type of overlap</quote> in <xref
              linkend="birnbaum_2015"/>.</para>
        </footnote></para>
      <para> This is why the XML processing workarounds involve either converting the markup to
        temporary text, which is one way of removing the possibility of overlap, or converting the
        white space temporarily to milestone elements, which transforms the pseudo-markup into real
        markup.</para>
      <para>In TAG, however, Markup nodes point to Text nodes from a different layer, which makes it
        possible to tokenize the text without interference from the markup. The tokenization splits
        larger text nodes into smaller ones, but they remain in the tail of their old Markup-to-Text
        hyperedges, while new Markup-to-Text hyperedges are added to tag the new individual
        words.</para>
      <para><emphasis role="ital">TODO: Add illustration before and after word
          tokenization</emphasis>
      </para>
      <para>Much as poetic emjambment in the Shelley poem above cannot be modeled by tagging both
        phrases and feet in XML because it would create an overlap situation, poetic caesura, the
        regular correspondence of foot and word boundaries within poetic lines, cannot be modeled in
        XML by tagging both poetic feet and words, since feet and words may overlap in the same way
        as phrases and lines. One work-around for this problem in an XML environment turned out to
        involve, surprisingly, tagging neither the feet nor the words (see [<xref
          linkend="birnbaum_2015"/>]), deriving both from other properties of the line during
        processing, but the fact that we can use white-space pseudo-markup to escape the
        consequences of syntactic overlap doesn’t mean that the the overlap isn’t there. A data
        model that could represent both feet and words explicitly, and that could identify caesura
        as a relationship between those two types of structural components, would represent
        explicitly the human understanding of caesura, and the explicit representation of structure
        is what markup is all about.</para>
    </section>
    <section>
      <title>Scope of reference</title>
      <para>Footnotes can be understood as annotations on text, but in XML they are typically
        represented by elements at the location where the note reference should occur in a reading
        text, as with the <code>&lt;footnote></code> element in DocBook or the
          <code>&lt;note></code> element in TEI. This is problematic because it does not mark
        explicitly the scope of the note, such as whether a footnote reference at the end of a
        paragraph refers to the preceding sentence or the entire paragraph. The TEI
          <code>&lt;note></code> element avoids this limitation because it can point to an arbitrary
        target with XPointer, but this is an indirect way of specifying what might have been
        represented as an attribute if XML attributes were able to model rich content. Because the
        text of a TAG annotation can be a target of markup and the annotation itself can be
        annotated, footnote-like relationships can be modeled in TAG as what they are: annotations
        on text.</para>
      <para><emphasis role="ital">TODO: Should we allow anonymous Markup nodes? If we’re footnoting
          a Text node that isn’t a textual object of a particular type, and we’re adding the Markup
          node just to be able to point to it from an Annotation, it would be natural not to impose
          a <code>name</code> property on the Markup node.</emphasis></para>
      <para><emphasis role="ital">TODO: Add illustration of footnote after question of anonymous
          Markup nodes is resolved</emphasis></para>
    </section>
    <section>
      <title>Data model versus syntax</title>
      <para>A third challenge of discussing XML as a model of text is distinguishing XML as a data
        model from XML as a syntax, and the same applies to the LMNL data model vs the LMNL sawtooth
        syntax and the GODDAG data structure vs TexMECS syntax. Perhaps a bit surprisingly in the
        context of Balisage, which describes itself as <quote>the <emphasis role="ital"
            >markup</emphasis> conference</quote>, our focus here is not on markup (that is, on
        syntax and serialization), but on the data models that may be expressed through markup. Our
        somewhat simplified <xref linkend="XML_specs"/> illustration, below, regards the marked-up
        XML document as related to the XML InfoSet by the operations of serialization in one
        direction and parsing in the other. This matters because the serialization is, as is clear
        from the etymology of the term, committed to an ordered expression in ways that other
        representations of XML may not be, and the same is true of other dxata models and their
        associated syntactic expressions through markup. If, for example, a paragraph is exactly
        coextensive with a quotation, in XML syntax, LMNL sawtooth syntax, and TexMECS syntax, the
        start tag of either the paragraph or the quotation must come first in linear order. But in
        LMNL the relative order of the ranges defined by the tags is not an obligatory part of the
        model, which permits two ranges to begin at the same location in the text .<footnote>
          <para>LMNL is able to represent hierarchy, but it is not obligatory, and
              <quote>flat</quote> LMNL does not express hierarchy.</para>
        </footnote> In XML, though, one element must be the parent of the other, and the order of
        the start tags reflects the hierarchy. TexMECS uses different start- and end-tag delimiters
        to distinguish when the relative order of the tags is informational and when it is not.<footnote>
          <para>STAGO vs STAGSO and ETAGO vs ETAGSO [<xref linkend="huitfeldt_2003"/>, §2.3.]</para>
        </footnote></para>
      <figure xml:id="XML_specs">
        <title>The XML document-processing ecosystem</title>
        <mediaobject>
          <imageobject>
            <imagedata format="png" fileref="xml-spec.png"/>
          </imageobject>
        </mediaobject>
        <caption>
          <para>The term <quote>XML</quote> may be used to refer to the data model or to its
            syntactic or other expressions.</para>
        </caption>
      </figure>
    </section>
    <section>
      <title>Semantics versus application level</title>
      <para>A fourth issue, which intersects with the three above, involves distinguishing
        properties that inhere in the text being modeled from those that depend on semantics that
        must be interpreted at a higher (application) level. A failure to make this distinction may
        have two types of consequences (which are really aspects of the same thing, the delegation
        of information that should be part of the model to the application layer): either the
        application must know that some properties of the model are not informational and are to be
        ignored or the application must know that there is information that is not represented
        entirely by the model and must therefore be added during processing. If, however, the model
        explicitly represents the properties of the text and nothing else, the application level is
        freed from having to supplement the model, and can concentrate on features that are truly
        application-specific. Here are two illustrations of this issue:<itemizedlist>
          <listitem>
            <para>The pairing of start and end tags in XML (or LMNL sawtooth or TexMECS) markup is
              inherent in the markup itself. In contrast, the pairing of XML milestones that are
              used to simulate container tags as a work-around for overlap (see the discussion of
              Trojan markup in <xref linkend="derose_2004"/>) relies on semantics. This means that
              XML applications do not have to know that regular start and end tags delimit an
              element because that information is an inalienable feature of all XML documents that
              is fully specified by the syntax, but they do have to know when empty tags are being
              used to simulate the beginning and end of a content object. Insofar as whether
              something is a content object is a property of the text being modeled, a robust and
              efficient strategy would represent it as part of the model itself, instead of
              requiring that it be handled through semantic information that is available only at
              the application level.</para>
          </listitem>
          <listitem>
            <para>Because XML models an ordered hierarchy, elements always have order, which
              requires the application layer to distinguish situations where order is semantically
              meaningful from situations where it isn’t. For example, the TEI
                <code>&lt;choice&gt;</code> element has the semantics of associating content objects
              that do not have a natural order with respect to one another, such as an abbreviation
              and its expansion or an error and its correction. How those should be rendered is the
              proper business of the application layer, but the XML model requires that one option
              proceed or follow the other even when the order does not represent an inherent
              property of the text being modeled. This means that, incorrectly (from the perspective
              of what the marked-up text means), an XML processor will regard two TEI documents as
              different if they differ only in the order of the children of their
                <code>&lt;choice&gt;</code> elements (unless the processor is given access to TEI
              markup semantics). A more robust and efficient strategy would not impose order when it
              must then be ignored, so that a processor will know when order is informational and
              when it is not from the model, without recourse to semantics.</para>
          </listitem>
        </itemizedlist></para>
    </section>
    <section>
      <title>Desiderata for an improved text model</title>
      <para>An improved text model should have the following properties. In all instances where we
        write that <quote>the model should be able to X</quote>, we mean that it should be able to X
        without requiring access to semantic information at the application level. In other words,
        the components of the model should fully represent the properties of the text being modeled,
        with no extraneous artifactual properties that an application must then know to ignore. XML
        uses the term <quote>markup</quote> to identify both elements and attributes, while in the
        list below we use the TAG terminology, where the term <quote>markup</quote> refers to the
        counterpart to XML elements and <quote>annotation</quote> to the counterpart to XML
        attributes.</para>
      <para>The following are characteristics we might ask of an improved text model:<itemizedlist>
          <listitem>
            <para>It should support both textual (character data) content and markup and annotations
              (of the sort expressed in XML through element and attribute markup).</para>
          </listitem>
          <listitem>
            <para>It should support multiple layers of markup and annotation.</para>
          </listitem>
          <listitem>
            <para>It should be able to represent overlapping markup.</para>
          </listitem>
          <listitem>
            <para>It should be able to represent discontinuous markup.</para>
          </listitem>
          <listitem>
            <para>It should be able to represent components that are not logically ordered without
              imposing an arbitrary order that must then be ignored.</para>
          </listitem>
          <listitem>
            <para>It should be able to represent transpositions, or reorderings, e.g., in a critical
              text with variants that differ only in order.</para>
          </listitem>
          <listitem>
            <para>It should support annotations on annotations, that is, metadata about
              metadata.</para>
          </listitem>
          <listitem>
            <para>It should support but not require the representation of hierarchy, including
              multiple, partial, or overlapping hierarchies.</para>
          </listitem>
          <listitem>
            <para>With respect to reading, it should support queries for text, markup, annotations,
              or a combination of those components.</para>
          </listitem>
          <listitem>
            <para>With respect to writing, it should support creating, inserting, deleting, or
              otherwise modifying both textual content and markup and annotations.</para>
          </listitem>
          <listitem>
            <para>With respect to workflow, it should be possible to defer decisions about relations
              among layers. For example, it should be possible to create markup and annotations
              without hierarchy and apply a hierarchy only later. This deferral might be compared to
              the way XML documents may be validated against schemas that may be created and
              associated only after a fully functional well-formed document has been created.</para>
          </listitem>
          <listitem>
            <para>With respect to scalability, it should enable, in a computationally efficient way,
              the types of documents and processing likely to be required by the digital text
              community.</para>
          </listitem>
          <listitem>
            <para>With respect to I/O, a system that implements the model should support
              serialization as plain text on export and the parsing of such serializations on
              import. TAG does not currently have its own syntax. Our Alexandria implementation can
              read and write LMNL syntax, and it is intended to be able to read and write XML and TexMECS.<footnote>
                <para>This list item refers to syntactic representations that were developed to
                  represent data models other than TAG: XML syntax and the XML data model, LMNL
                  sawtooth syntax and the LMNL data model, and TexMECS and GODDAG data model. When
                  we speak about parsing XML or LMNL or TexMECS <emphasis role="ital"
                    >syntax</emphasis> into Alexandria, we mean that it is parsed into the TAG data
                  model, and not into XML or LMNL or GODDAG data models.</para>
                <para>XML angle-bracketed markup, LMNL sawtooth markup, and TexMECS all are capable
                  of representing some but not all features of TAG. For example, LMNL supports
                  annotations on annotations, while TexMECS doesn’t. More subtly, because
                  annotations on the same object are ordered in LMNL but not in TAG, when Alexandria
                  parses LMNL syntax, it is not parsing it into the LMNL data model because, among
                  other things, it creates unordered annotations. TexMECS supports hierarchy, while
                  LMNL sawtooth syntax does not. LMNL can represent hierarchy through the <emphasis
                    role="ital">limen</emphasis>, but the limen currently has no defined
                  representation in the syntax. [<xref linkend="piez_2008"/>] We leave unresolved
                  for now the question of how to serialize fully all information in a TAG
                  document.</para>
              </footnote></para>
          </listitem>
          <listitem>
            <para>With respect to user interaction, a system that implements the model should
              provide a legible interface that enables reading and writing by human users.<footnote>
                <para>We leave unresolved for now the design and implementation of such an
                  interface, except to say that it might not require a specialized, TAG-aware
                  editor. One approach might involve the selective export of TAG information for
                  manipulation in a third-party editor, followed by its reimport and reintegration
                  into the TAG document.</para>
              </footnote></para>
          </listitem>
        </itemizedlist></para>
      <!--explain the differences between graph models and trees and ranges? Or leave that
        discussion out?-->
      <!--Reading Wendell's papers/articles about LMNL and Luminescent I can't help but notice
        that it is mainly about modeling text using LMNL, querying (using xLMNL and xQuery
        extensions) and visualising data. These are all read only operations. The goal of the TAG
        model and its implementation in Alexandria is that it can be used to read as well as write
        textual data and annotations. This opens up a lot of new possibilities and makes it a
        'complete' text repository system, comparable to XML databases albeit in a far more
        experimental state and a much lower level of maturity.-->
    </section>
  </section>
  <section>
    <title>Comparison of TAG/hypergraph to other text models</title>
    <para>In this section we compare the TAG data model with three well-known alternative data
      models used to represent and process text: 1) XML DOM (tree), GODDAG (forest/graph), and LMNL
      (range). The three systems have regular syntactic expressions: XML angle bracket syntax for
      XML DOM, TexMECS for GODDAG, and LMNL sawtooth syntax for LMNL. XML, GODDAG, and LMNL
      processors ingest serialized documents and parse them into in-memory representations of the
      data model.</para>
    <para>The syntax is not the data model. The data model could, at least in principle, be
      serialized in other ways, and the syntax could be coopted to represent a different data model.
      TAG does not at present have its own serialization syntax; it can read and write LMNL sawtooth
      syntax (parsing it as a representation of the TAG data model, rather than of LMNL), and it is
      intended to be able to do the same with XML and TexMECS syntax.</para>
    <section>
      <title>TAG and DOM</title>
      <section>
        <title>TAG and DOM, XDM, and the XML InfoSet</title>
        <para><emphasis role="bital">TODO: Talk about XML, rather than DOM, since DOM is an object
            model and TAG is a data model?</emphasis></para>
        <para>TAG, as a hypergraph, and DOM, as a tree, are both graphs, that is, sets of 1) nodes
          and 2) edges that express relationships among the nodes. We can compare them, then, by
          comparing the nodes and edges they provide and the relationships those components express.
          TAG and DOM are not exactly comparable because TAG is a document model and DOM is an API,
          and for that reason we draw not only on DOM, but also on the XML InfoSet and on XDM in
          this comparison. These specifications provide different perspectives on an XML document
          for different purposes, as follows:</para>
        <itemizedlist>
          <listitem>
            <para><quote>The Document Object Model (DOM) is an application programming interface
                (API) for valid HTML and well-formed XML documents. ... The Document Object Model is
                not a set of data structures; it is an object model that specifies interfaces.
                Although this document contains diagrams showing parent/child relationships, these
                are logical relationships defined by the programming interfaces, not representations
                of any particular internal data structures. ... The Document Object Model does not
                define what information in a document is relevant or how information in a document
                is structured. For XML, this is specified by the W3C XML Information Set [<link
                  xlink:href="https://www.w3.org/TR/DOM-Level-2-Core/references.html#InfoSet"
                  >Infoset</link>]. The DOM is simply an API to this information set.</quote>
              <footnote>
                <para>Alternatively, <quote>[t]he Document Object Model (DOM) is a programming
                    interface for HTML, XML and SVG documents.</quote> [<xref linkend="MDN_DOM"
                  />]</para>
              </footnote> Because the DOM is defined as an API, it is organized around objects,
              which may not correspond in a one-to-one fashion to components of an abstract data
              model. [<xref linkend="W3C_DOM"/>] </para>
          </listitem>
          <listitem>
            <para>The XML InfoSet describes the information items that are available from an XML
              document. It <quote>presents the information set as a modified tree for the sake of
                clarity and simplicity, but there is no requirement that the XML Information Set be
                made available through a tree structure</quote> Furthermore, <quote>[i]nformation
                items do not map one-to-one with the nodes of the DOM or the "tree" and "nodes" of
                the XPath data model.</quote> [<xref linkend="W3C_xmlinfoset"/>]</para>
          </listitem>
          <listitem>
            <para>The XQuery 1.0 and XPath 2.0 Data Model (XDM) <quote>is the data model of [<link
                  xlink:href="https://www.w3.org/TR/xpath-datamodel/#xpath20">XML Path Language
                  (XPath) 2.0 (Second Edition)</link>], [<link
                  xlink:href="https://www.w3.org/TR/xpath-datamodel/#xslt20">XSLT 2.0 (Second
                  Edition)</link>] and [<link
                  xlink:href="https://www.w3.org/TR/xpath-datamodel/#xquery">XQuery</link>] … [It]
                specifies what information in the documents is accessible, but it does not specify
                the programming-language interfaces or bindings used to represent or access the
                data. … The data model can represent various values including not only the input and
                the output of a stylesheet or query, but all values of expressions used during the
                intermediate calculations.</quote> [<xref linkend="W3C_xdm"/>]</para>
          </listitem>
        </itemizedlist>
        <para>We use the term DOM here, not entirely accurately, to refer to the structural features
          of the XML data model that are relevant for comparison with TAG as a data model.</para>
      </section>
      <section>
        <title>Nodes</title>
        <para>Both the DOM and TAG data models are node based, and in both models the nodes are
          typed. XDM defines seven types of nodes (Document, Element, Attribute, Text, Namespace,
          Processing instruction, and Comment [<xref linkend="W3C_xdm"/>]), XML DOM defines twelve
          (Document, DocumentFragment, DocumentType, EntityReference, Element, Attr,
          ProcessingInstruction, Comment, Text, CDATASection, Entity, and Notation [<xref
            linkend="W3C_DOM"/>]), and the XML InfoSet defines eleven types of information objects
          (Document, Element, Attribute, Processing Instruction, Unexpanded Entity Reference,
          Character, Comment, Document Type Declaration, Unparsed Entity, Notation, and Namespace
            [<xref linkend="W3C_xmlinfoset"/>]). Items in the XML InfoSet and XML DOM that do not
          have direct counterparts in XDM are needed in those other specifications because their
          functions are not completely coextensive with those of XDM, and the DOM node types that
          are relevant in the context of a comparison with TAG, as defined at this stage, are
          Document, Element, Attr, and Text.</para>
        <para>The following table illustrates the functional correspondence of DOM and XDM node
          types and XML InfoSet information items to node types in TAG, with the understanding that
          because TAG is not a tree model, the properties and behaviors are different, and there are
          differences even among the XML-related specifications (e.g., the InfoSet Character
          information item is a single character, while a DOM and XDM Text node may contain multiple
          characters):</para>
        <table>
          <thead>
            <tr align="center">
              <th align="center">DOM</th>
              <th>XDM</th>
              <th align="center">InfoSet</th>
              <th align="center">Tag</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Document</td>
              <td>Document</td>
              <td>Document</td>
              <td>Document</td>
            </tr>
            <tr>
              <td>Element</td>
              <td>Element</td>
              <td>Element</td>
              <td>Markup</td>
            </tr>
            <tr>
              <td>Text</td>
              <td>Text</td>
              <td>Character</td>
              <td>Text</td>
            </tr>
            <tr>
              <td>Attr</td>
              <td>Attribute</td>
              <td>Attribute</td>
              <td>Annotation</td>
            </tr>
          </tbody>
        </table>
        <para>Other DOM and XDM nodes and InfoSet information items currently have no counterpart in
          TAG node types. The corresponding node types may correspond only very loosely; for
          example: <itemizedlist>
            <listitem>
              <para>The XML Document node serves as the root of the tree, while the function of the
                TAG Document node is to point to the first Text node in the document.</para>
            </listitem>
            <listitem>
              <para>XML Element nodes specify the generic identifier of the Element and both contain
                and dominate their descendants. TAG Markup nodes also specify the name of the Markup
                node. TAG Markup nodes that point to Text nodes represent containment but not
                dominance (hierarchy), and TAG Markup nodes that point to Markup nodes represent
                dominance (hierarchy).</para>
            </listitem>
            <listitem>
              <para>XML Attribute nodes cannot contain marked-up content. TAG Annotation nodes
                describe micro-documents that may contain Text, Markup, and Annotation nodes.</para>
            </listitem>
          </itemizedlist></para>
      </section>
      <section>
        <title>Order</title>
        <para>XML describes a fully ordered tree, where not only does order inhere in the hierarchy
          (parents are ordered before children), but siblings also have a fixed order.<footnote>
            <para>Attribute and Namespace nodes on the same Element do not have a defined
              order.</para>
          </footnote> In TAG the Text nodes of the document form a continuous chain, the head of
          which is the Document node, and the Text nodes in an annotation form their own continuous
          chains, beginning at the Annotation nodes. But while Element nodes in XML are part of the
          overall order of the ordered tree, Markup nodes in TAG are unordered. Annotation nodes on
          the same node in TAG and Attribute nodes on the same Element in XML are both
          unordered.</para>
      </section>
      <section>
        <title>Hyperedges</title>
        <para>In DOM the nodes form an ordered tree with the Document node as the root, while in TAG
          nodes are organized in a graph/hypergraph. In the tree-based DOM model, there is a single
          root node and the children of nodes that may have children (Document, Element) are ordered
          sets. Every child node can have only one parent node, which means that there is a one-to-n
          relation between a parent node and its child nodes. The TAG model uses a hypergraph
          instead, where nodes are connected through the use of hyperedges. For example, a Markup
          node may point to multiple Text nodes, and this is similar to the way a DOM element node
          may have multiple Text node children. But in TAG a Text node may be pointed to by multiple
          Markup nodes, while in DOM it is not possible for a Text node to have multiple Element
          node parents. This means that TAG differs from DOM by permitted n-to-n relations between
          Text nodes and Markup nodes.</para>
      </section>
      <section>
        <title>Hierarchy and the root element</title>
        <para>Unlike in DOM, the nodes of a TAG document are not required to specify a hierarchy,
          which means, among other things, that no root element is required. The closest TAG
          counterpart to a DOM root element (in the sense that a DOM root element has a superior
          relationship, whether understood as containment or dominance, to all Text nodes) would be
          a Markup node that is connected directly, through a hyperedge, to all the Text nodes of
          the document. This differs from an XML root element, though, because the XML root element,
          although the ancestor of all Text nodes, is not necessarily connected to them directly in
          a parent-child relationships.</para>
        <para>Relations between Markup nodes and Text nodes or other Markup nodes in TAG do not have
          to be strictly hierarchical. In DOM the relationship between a parent and a child is
          always one of dominance (hierarchy). In TAG, on the other hand, by default there is no
          direct relation among Markup nodes. Dominance relations may be expressed by adding a
          Markup-to-Markup hyperedge with a Type value of <quote>dominance</quote> that points from
          one Markup node a set of Markup nodes. Containment relations can be calculated from the
          intersection of the Text nodes of two Markup nodes, and does not need to be modeled
          explicitly. For example, where in XML a <code>&lt;quatrain></code> element might be the
          parent of four <code>&lt;line></code> elements, in TAG the <quote>quatrain</quote> and
            <quote>line</quote> Markup nodes point to sets of Text nodes, and the formal expression
          is not that the quatrain contains the line, but that the Text nodes of the line are a
          subset of the Text nodes of the quatrain.</para>
        <para>In both the DOM and the TAG model adding a new Text or Markup (Element) node is a
          local operation.</para>
      </section>
    </section>
    <section>
      <title>TAG and GODDAG</title>
      <section>
        <title>Description of GODDAG</title>
        <para>GODDAG, which stands for generalized ordered-descendant directed acyclic graph
          (citation) is the data structure accompanying the MECS markup language and it's successor
          TEXTMecs. </para>
        <para>It is as a way to deal with the overlapping hierarchies problem. GODDAG presumes there
          to be a hierarchy in the content. In contrast to the XDM it is allows for multiple
          hierarchy to be represented instead of one. Instead of storing one tree in the graph,
          multiple trees are stored in the graph, with shared nodes between the trees not being
          duplicated. The root node is shared between the different hierarchies.</para>
        <para>Both containment and dominance relations can be modelled in a GODDAG. Dominance
          relation is the case one node is the parent of another and the children of the parent
          fully include the children of its descendants. Otherwise the relation is treated as
          containment. This means that most relations will be dominance.</para>
        <para>The graph contains nodes, that are typed and ordered (as the name implies), as </para>
        <para>There are two variants of GODDAG, the restricted and the generalized GODDAG. The
          restricted variant allows for a single order of the text nodes, while the generalized
          model allows multiple orders of text nodes.</para>
        <para>The restricted variant is enough to implement the MECS and TEXTMecs markup language as
          a data model parsing and processing.</para>
        <para>The textual content of the document is segmented in non overlapping parts and stored
          in the leaf nodes of the graph. Text nodes with empty Strings are allowed.</para>
        <para>The order of the text nodes is determined by the parent nodes. </para>
        <para>To represent discontinuous markup multiple (two or more) nodes are needed. (citation).
          Discontinuity in GODDAG has to be represented by two or more separate markup nodes
          (citation)</para>
      </section>
      <section>
        <title> Comparison between TAG and GODDAG </title>
        <para> - Both GODDAG and TAG are based on graph structures. Both are directed. Both are
          acyclic. TAG using one to many edges (hyperedges), while GODDAG uses multiple one to one
          edges. - TAG segments the textual content, just like GODDAG and XDM do. - TAG has one
          order to the text nodes. This is similar to restricted goddags. The generalized GODDAG
          model can express multiple orders. - The order of the text nodes in GODDAG is derived from
          it's parent nodes. In TAG the order of the text nodes is determined by the edges between
          the text nodes independent of the presence of a hierarchy in the markup nodes. - GODDAG
          has a root node, TAG does not. A root node can be emulated - GODDAG presumes there to be
          one or more hierarchy. TAG does not (although a hierarchy can be expressed in TAG through
          the use of hyperedges between markup nodes). - In both GODDAG and TAG dominance and
          containment can be expressed. Dominance is the default relationship in GODDAG, while
          containment is the default in TAG. - In both GODDAG attributes and TAG annotations are
          unordered. - In GODDAG attributes cannot contain markup, while in TAG annotations can have
          markup on them. Annotations can be annotated in TAG, while attributes cannot have
          attributes in GODDAG. - Both GODDAG and TAG can model and process the data contained in
          MECS and TexMECS markup. - Both GODDAG and TAG can model overlap. - In GODDAG multiple
          nodes are needed to model discontinuity. In TAG only a single node and is needed. - Both
          GODDAG and TAG support multiple parentage. That is to say that each markup node can
          contain multiple text nodes and each text node can have multiple markup nodes associated
          with it. - Both GODDAG and TAG contain nodes that are typed. Element nodes are called
          Markup in TAG . Both contain text nodes. Attributes are called Annotations in TAG. </para>
        <para/>
        <para/>
        <para>OLD TEXT</para>
        <para>The GODDAG datastructure allows for the storage of multiple hierarchies. Markup
          written in the MECS format can be parsed and read into memory. Elements that fully overlap
          are presumed to be dominating. Hierarchical structures are implied. Discontinuity is not
          supported. The graph is directed from the root node. The order of the text nodes is
          derived from the traversal of the element nodes. TAG differs in the sense that the order
          of text nodes is derived from explicit directed edges between the text segments. TAG
          differs in another way in the sense that relations between elements do not have to be one
          of domination. Relations between elements can be expressed by adding extra edges that are
          typed. The kind of relation can be determined later through the use of a schema. GODDAG
          and TAG are similar in the sense that they both support an N to N relation between
          elements (called markup in TAG) and PC-DATA nodes (called text nodes in TAG).</para>
      </section>
    </section>
    <section>
      <title>TAG and LMNL</title>
      <para>The four text models described in this paper can be categorized according to whether
        they are based on trees (XML, GODDAG) or not (LMNL, TAG), and in this respect LMNL is the
        most similar to TAG of the other three. This section examines the similarities and
        differences between TAG and LMNL.</para>
      <section>
        <title>The LMNL and TAG data models</title>
        <para>LMNL is based on ranges of atoms, which can be understood as (possibly overlapping)
          projections over a continuous, ordered set of atoms (typically, although not exclusively,
          Unicode characters). TAG Markup nodes are projected over a continuous ordered set of Text
          nodes, rather than atoms, which is fundamentally a question of granularity, since Text
          nodes could be decomposed into Unicode characters.</para>
        <para>A more fundamental difference is that LMNL ranges must be continuous because they have
          single <code>start</code> and <code>end</code> properties [<xref linkend="LMNL_data"/>],
          and <quote>a value comprising a single string (a sequence of contiguous
            characters).</quote> [<xref linkend="piez_2014"/>] This means that LMNL must model
          discontinuous sets of atoms, such as those constituting the divided quotation above,
          differently from continuous ones. A continuous set of atoms may serve as the content of a
          single range, but discontinuous components must be stitched together through coindexing,
          as illustrated in <quote>An example limen: relating discontinuous ranges</quote> in <xref
            linkend="piez_2008"/>. This means that a Markup-to-Text hyperedge in TAG has the same
          structure regardless of whether the Text nodes in the tail are continuous. This lets us
          tag a single quotation or a single song with a single Markup node regardless of whether
          its text is continuous, while LMNL requires multiple ranges, and a mechanism for relating
          them to one another, in situations involving discontinuity.</para>
      </section>
      <section>
        <title>LMNL syntax in a TAG environment</title>
        <para>At present TAG does not have its own syntax, and strategies for import and export are
          under active development in Alexandria. Alexandria is able to parse and import flat LMNL
          sawtooth syntax, but it treats the syntax as an expresssion of TAG properties, rather than
          LMNL ones. This means, for example, that although annotations on the same object in LMNL
          are ordered, because those in TAG are not, this order is not treated as informational
          during import or export, or internally. It also means that TAG structures that are not
          naturally represented in LMNL syntax, such as the Document node or discontinuous sets of
          Text nodes, also require special handling. The same is true of LMNL structures that are
          not (yet) represented in LMNL sawtooth syntax, such as the limen. [<xref
            linkend="piez_2008"/>] Alexandria is not intended to be an implementation of LMNL, and
          the use of LMNL sawtooth syntax in TAG should not be misunderstood as representing the
          LMNL data model.</para>
      </section>
      <section>
        <title>Hypergraph versus ranges</title>
        <para>LMNL defines ranges according to their offset into the stream of atoms that makes up
          the content of the document, which makes it inexpensive for an implementation to add new
          annotations, but expensive to modify the textual content because doing so changes the
          offsets of all annotations that begin after the point of insertion. A modification of
          textual content in TAG is a local modification of an ordered set, that is, of a list,
          which is an inexpensive operation.
          <!--This was originally in the LMNL section, and should be moved elsewhere (and perhaps divided over multiple locations). Hypergraph versus GODDAG: With the directed acyclic graph model it is inexpensive to add or change textual content, however since all the annotation nodes have to be connected to all the textual nodes involved this model scales badly with the number of textual nodes and the number of annotations. Hypergraph versus DOM: In the traditional tree model it is cheap to add or modify textual content and to add annotations, however there is only a single hierarchy. On top of that, having a hierarchy is required. Scalability of the hypergraph model versus all the other models: In the hypergraph approach it is inexpensive (we really should use O notations here) to add or modify textual content, adding annotations is not as cheap as it is with ranges, (a new set needs to be created and a bit needs to be set for every text node involved), but it's cheaper than the DAG model, since hypergraphs can be stored as sets rather than having to model individual edges.--></para>
      </section>
      <section>
        <title>Comparison of the hypergraph model with the LMNL markup file format</title>
        <para>A text graph representing all the data contained in a LMNL document consists of both a
          directed acyclic graph (DAG) and a hypergraph (HG). The DAG contains the range nodes, the
          annotation nodes, the edges between them, and all the text nodes and the edges between
          them. The HG contains all the hyperedges between the text nodes and the range nodes
          representing the many-to-many relation between them. That is, a text node has zero or more
          ranges on it, while a range can have zero or more text nodes associated with it. A range
          can be annotated, and an annotation can itself be annotated.</para>
        <para>The LMNL markup file format removes the constraint that the last opened range has to
          be closed first. That means that it is possible to model overlapping hierarchies in LMNL.
          To be more precise, it is possible to model annotations with one hierarchy, multiple
          hierarchies or no hierarchy at all. This allows for a great freedom to model all kinds of
          information on textual content. This is great from a content perspective. However LMNL is
          more expensive from a computational perspective.</para>
        <para>LMNL data model LMNL documents contain text. Text can have ranges on them. Ranges can
          overlap. Ranges can be annotated on either the start tag or the end tag. Annotations can
          contain text themselves, that can have ranges, that can have annotations etc. Annotations
          can be annotated. Annotations on a range are ordered.</para>
      </section>
      <section>
        <title>LMNL conceptual model and how to map it to a hypergraph</title>
        <!--It is very important that we explain what we kept of the original data model behind
            LMNL and what we changed and why.-->
        <para>The conceptual datamodel behind is XML is the Document Object Model (DOM). The DOM
          represents a tree based data structure. The data model behind LMNL is different, in that
          it is based on ranges, based on offsets on textual content.</para>
      </section>
    </section>
    <section>
      <title>TAG and linguistic databases</title>
      <para><emphasis role="bold">TODO: Linguistic corpora are not recursive; there’s a single text
          stream</emphasis></para>
    </section>
  </section>
  <section>
    <title>TAG in Alexandria</title>
    <!--some of this may be plans or projections, rather than implementation-->
    <section>
      <title>Introduction to Alexandria as a TAG implementation</title>
      <para>This paper introduces the Alexandria text repository system, an open-source read/write
        implementation of the TAG model. It allows the user to import and store text files in either
        XML or LMNL markup (with support planned for TexMECS), and it supports multiple layers of
        annotation that are permitted to overlap. </para>
      <para><emphasis role="bold">TODO: write something</emphasis></para>
    </section>
    <section>
      <title>Graph and hypergraph</title>
      <para><emphasis role="bold">TODO: write something</emphasis> The implementation in the current
        Alexandria markup system stores the nodes and hyperedges in a key-value store. </para>
    </section>
    <section>
      <title>Navigation and query</title>
      <para><emphasis role="bold">TODO: write something</emphasis></para>
    </section>
    <section>
      <title>Import and export</title>
      <para> The Alexandria Markup system contains a parser that can import LMNL files and convert
        into an implementation of the TAG model in memory. Given the following LMNL markup "Hello
        World". We save this plain text transcription in a LMNL file. When we import this file into
        Alexandria a graph is created. The graph is very simple: it only consists of 2 nodes and 1
        edge. One Document node is created. One Text node is created, containing all of the text. An
        edge is created from the Document node to the text node associating the text with the
        document. When we change the LMNL markup to "[doc}Hello World{doc]" How serialization works
        A serialization of the TAG data model into a LMNL file is an example of a traversal over an
        instance. Start with the Document node. A document node has an outgoing edge to the first
        text node. Now we follow the hyperedges that are connected to this text node. There can be
        zero or more hyperedges present on a text nodes. Each hyperedge connects to one markup node.
        We collect all the markup nodes that are connected to the text node. For each of them we
        write a start tag. Then we go to the next text node by following the outgoing edge to the
        next text node. Like before we collect all the markup nodes connected to this text node. We
        calculate the differences between the sets. For the intersection we do nothing. For markup
        nodes that are only the set of the previous nodes we write close tags. For the set of markup
        nodes that is only in the current set of markup nodes we write open tags. <emphasis
          role="bold">TODO: write something</emphasis></para>
    </section>
  </section>
  <section>
    <title>Conclusions</title>
    <para>Tree models are top down. TAG is bottom up. LMNL is flat. XML conflates not only
      containment and dominance (hierarchy), but it also mixes in datatyping. A model that contains
      artifactual structures that must then be ignored by the application has poor design, even if
      there are no consequences for the output of processing. Oh, and did we mention order? XML is
      an ordered tree (as is GODDAG, and LMNL is an ordered sequence of atoms); TAG establishes text
      order with normal edges and derives markup order from the order of the text nodes to which the
      markup points, so order is separate from markup.</para>
  </section>
  <appendix xml:id="sonnet-71_text" xreflabel="Appendix A">
    <title>William Shakespeare, Sonnet 71</title>
    <programlisting>No longer mourn for me when I am dead
Than you shall hear the surly sullen bell
Give warning to the world that I am fled
From this vile world with vilest worms to dwell:

Nay, if you read this line, remember not
The hand that writ it, for I love you so,
That I in your sweet thoughts would be forgot,
If thinking on me then should make you woe.

O! if,—I say you look upon this verse,
When I perhaps compounded am with clay,
Do not so much as my poor name rehearse;
But let your love even with my life decay;

Lest the wise world should look into your moan,
And mock you with me after I am gone.</programlisting>
  </appendix>
  <appendix xml:id="to_do" xreflabel="Appendix B">
    <title>Features of text not represented in TAG or in Alexandria</title>
    <para>The following are not currently part of the TAG model, but they are recognized as
      necessary components of a textual data model, and under development.</para>
    <section>
      <title>Order</title>
      <section>
        <title>Simultaneity</title>
        <para>All Text nodes in TAG are ordered, but modeling text as a partially ordered set,
          rather than as an ordered set, would reflect the nature of text more correctly. For
          example, the TEI XML <code>&lt;choice&gt;</code> element wraps child elements that do not
          have a logical mutual order, such as an abbreviation and its expansion or an error and its
          correction. In XML, artifactual order of this sort cannot be excluded from the model, and
          must therefore be ignored at the application level, and TAG, as described above, currently
          has the same limitation. Ideally, sets of Text nodes that are not mutually ordered
          logically would not have order in the model.</para>
        <para>Not only are the children of <code>&lt;choice&gt;</code> ordered artificially, but the
            <code>&lt;choice&gt;</code> element itself is artifactual, as it represents as an
          element in the hierarchy a property that is fundamentally an issue of traversal. The same
          is true of the TEI <code>&lt;app></code> element in the parallel segmentation
          representation of textual variation. Both the artifactual order and the artifactual
          wrapper are typically managed at the application layer, but the Variant Graph used to
          model textual variation in the open-source CollateX collation tool [<xref
            linkend="collatex"/>] represents alternative readings without these sorts of wrappers,
          and could be used to model simultaneous alternatives without either artifactual order or
          artifactual wrappers. For example, an abbreviation and its expansion might be represented
          as:</para>
        <para><emphasis role="ital">TODO: Add illustration</emphasis></para>
        <para>Because currently Text nodes in TAG are fully ordered, it is not possible to model
          simultaneity through multiple ordering edges between Text nodes.</para>
      </section>
      <section>
        <title>Transposition</title>
        <para>A traditional challenge for markup languages involves transpositions, of the sort that
          occur when creating critical editions in which the textual witnesses may contain some of
          the same words, but with reordering. This is also part of the Variant Graph structure used
          to model textual variation in the open-source CollateX collation tool [<xref
            linkend="collatex"/>], but because currently Text nodes in TAG are fully ordered, it is
          not possible to model transpositions as alternative orders.</para>
      </section>
    </section>
    <section>
      <title>Constraint language</title>
      <para>Constraints in this paper are expressed in prose. They should be expressed
        formally.</para>
    </section>
    <section>
      <title>Query language</title>
      <para>TAG needs a query language that expresses queries in terms of operations on sets of
        nodes and edges.</para>
    </section>
    <section>
      <title>Markup language</title>
      <para>TAG does not define a markup language, that is, a syntactic form that can be used to tag
        text and for import and export serialization. Alexandria can parse LMNL syntax (into the TAG
        data model, not the LMNL one, so it is not so much parsing LMNL as borrowing LMNL syntax to
        express TAG relationships), and support is planned for TexMECS and XML syntax (also as
        representations of TAG, and not of GODDAG or XML). None of these three grammars is capable
        or representing all of the features of TAG. We leave open the question of how to provide a
        character-string serialization of a TAG document.</para>
    </section>
  </appendix>
  <appendix xml:id="snark" xreflabel="Appendix C">
    <title>Hypergraph visualization</title>
    <para>The image below visualize hypergraph properties of part of Lewis Carroll’s <quote>Hunting
        of the Snark</quote>. The Document node, represented by a black circle, is at the top. Text
      nodes are hexagons outlined in white and filled in black, and they are connected by black
      lines that begin at the Document node. Markup nodes of type <quote>Line</quote> are
      represented by horizontal white lines; a new verse line begins after an old one ends. Markup
      nodes of type <quote>Voice</quote>, <quote>Stanza</quote>, and <quote>Phrase</quote> are
      represented by irregular backgrounds of chartreuse yellow, magenta, and purple, respectively.
      A Markup node of type <quote>Page</quote>, in orange, contains all of the Text nodes. The
      image models containment with no statement of dominance, although dominance could be asserted
      by adding Markup-to-Markup edges.</para>
    <figure xml:id="snark_hypergraph">
      <title>Lewis Carroll, <quote>The hunting of the Snark</quote> (excerpt)</title>
      <mediaobject>
        <imageobject>
          <imagedata format="png" fileref="snark.png"/>
        </imageobject>
      </mediaobject>
      <caption>
        <para>This hypergraph models the containment and order of the text, with no statement of
          hierarchy (dominance).</para>
      </caption>
    </figure>
  </appendix>
  <bibliography>
    <title>Works cited</title>
    <bibliomixed xml:id="birnbaum_2015" xreflabel="Birnbaum and Thorsen 2015">Birnbaum, David J.,
      and Elise Thorsen. <quote>Markup and meter: Using XML tools to teach a computer to think about
        versification.</quote> Presented at Balisage: The Markup Conference 2015, Washington, DC,
      August 11–14, 2015. In <emphasis role="ital">Proceedings of Balisage: The Markup Conference
        2015</emphasis>. Balisage Series on Markup Technologies, vol. 15 (2015). DOI:
      10.4242/BalisageVol15.Birnbaum01. <link
        xlink:href="https://www.balisage.net/Proceedings/vol15/html/Birnbaum01/BalisageVol15-Birnbaum01.html"
      /></bibliomixed>
    <bibliomixed xml:id="collatex" xreflabel="CollateX">CollateX.
        <link>https://pypi.python.org/pypi/collatex</link></bibliomixed>
    <bibliomixed xml:id="coombs_1987" xreflabel="Coombs et al. 1987">Coombs, James H., Allen H.
      Renear, and Steven J. DeRose. <quote>Markup systems and the future of scholarly text
        processing.</quote>
      <emphasis role="ital">Communications of the association for computing machinery</emphasis>,
      30.11 (Nov. 1987): 933–47. doi:10.1145/32206.32209</bibliomixed>
    <bibliomixed xml:id="derose_2004" xreflabel="DeRose 2004">DeRose, Steven J. <quote>Markup
        overlap: a review and a horse.</quote> Extreme Markup Languages 2004.
        <link>http://xml.coverpages.org/DeRoseEML2004.pdf</link></bibliomixed>
    <bibliomixed xml:id="derose_1990" xreflabel="DeRose et al. 1990">DeRose, Steven J., David G.
      Durand, Elli Mylonas, and Allen H. Renear. <quote>What is text, really?</quote>, <emphasis
        role="ital">Journal of computing in higher education</emphasis>, 1.2 (1990): 3–26.
      doi:10.1007/BF02941632.
        <link>http://www.cip.ifi.lmu.de/~langeh/test/1990%20-%20DeRose%20-%20What%20is%20Text,%20really%3F.pdf</link></bibliomixed>
    <bibliomixed xml:id="durusau" xreflabel="Durusau and O’Donnell 2002">Durusau, Patrick and
      Matthew Brook O’Donnell. <quote>JITTs (Just-In-Time-Trees)</quote>, presentation at New York
      XML SIG, January 2002. (Slides for <quote>Just-In-Time-Trees (JITTs): Next Step in the
        Evolution of Markup?</quote>, <emphasis role="ital">InterCharge: newsletter of the
        international SGML/XML users’ group</emphasis>, 8.4 (2002): 21–26.
        <link>http://www.durusau.net/publications/NY_xml_sig.pdf</link></bibliomixed>
    <bibliomixed xml:id="erjavec_2007" xreflabel="Erjavec 2007">Erjavec, Tomaž. <quote>XML and
        overlapping hierarchies.</quote> Presentation at Tsujii Lab, Tokyo, 2007-09-01.
        <link>http://nl.ijs.si/et/talks/tsujiilab-crossing/crossing.pdf</link></bibliomixed>
    <bibliomixed xml:id="hasibi_2014" xreflabel="Hasibi and Bratsberg 2014">Hasibi, Faegheh and
      Svein Erik Bratsberg. <quote>Non-hierarchical structures: how to model and index
        overlaps?</quote> Presented at Balisage: The Markup Conference. August 2014.
      <link/></bibliomixed>
    <bibliomixed xml:id="hilbert_2005" xreflabel="Hilbert, Schonefeld, and Witt 2005">Hilbert,
      Mirco, Oliver Schonefeld, and Andreas Witt. <quote>Making CONCUR work.</quote>
      <emphasis role="ital">Proceedings of Extreme Markup Languages</emphasis> 2005.
        <link>http://conferences.idealliance.org/extreme/html/2005/Witt01/EML2005Witt01.xml#Horse</link></bibliomixed>
    <bibliomixed xml:id="huitfeldt_2003" xreflabel="Huitfeldt and Sperberg-McQueen 2003">Huitfeldt,
      Claus and C. Michael Sperberg-McQueen. <quote>TexMECS. An experimental markup meta-language
        for complex documents.</quote> Revision of 5 October 2003.
        <link>http://mlcd.blackmesatech.com/mlcd/2003/Papers/texmecs.html</link></bibliomixed>
    <bibliomixed xml:id="iacob_2005" xreflabel="Iacob and Dekhtyar 2005">Iacob, Ionut Emil and Alex
      Dekhtyar. <quote>Concurrent markup hierarchies: a computer science approach.</quote>
      <link>http://tomcat-stable.hcmc.uvic.ca:8080/ach/site/xhtml.xq?id=174</link>
    </bibliomixed>
    <bibliomixed xml:id="iacob_2004" xreflabel="Iacob et al 2004">Iacob, Ionut E., Alex Dekhtyar and
      Kazuyo Kaneko. <quote>Parsing concurrent XML.</quote>
      <emphasis role="ital">Workshop on Web Information Management (WIDM’04) at ACM CIKM’04
        Proceedings</emphasis>, Washington DC., November 12, 2004, 23–30.
        <link>http://digitalcommons.calpoly.edu/csse_fac/129</link></bibliomixed>
    <bibliomixed xml:id="ide_2007" xreflabel="Ide and Suderman 2007">Ide, Nancy and Keith Suderman.
        <quote>GrAF: a graph-based format for linguistic annotations.</quote> Proceedings of the
      Linguistic Annotation Workshop, held in conjunction with ACL 2007, Prague, June 28–29, 1–8.
        <link>https://www.cs.vassar.edu/~ide/papers/LAW.pdf</link></bibliomixed>
    <bibliomixed xml:id="LMNL_data" xreflabel="LMNL data model">LMNLWiki. <quote>LMNL data
        model.</quote> From the <emphasis role="ital">Lost Archives of LMNL</emphasis>.
        <link>http://www.lmnl.net/prose/data-model/data-model-spec.html</link></bibliomixed>
    <bibliomixed xml:id="LMNL_ranges" xreflabel="LMNL range relations">LMNLWiki <quote>Range
        relationships.</quote> From the <emphasis role="ital">Lost Archives of LMNL</emphasis>.
        <link xlink:href="http://lmnl-markup.org/specs/archive/Range_relationships.xhtml"
      /></bibliomixed>
    <bibliomixed xml:id="marcoux_2008" xreflabel="Marcous 2008">Marcoux, Yves. <quote>Graph
        characterization of overlap-only TexMECS and other overlapping markup formalisms.</quote>
      Presented at Balisage: The Markup Conference 2008, Montréal, Canada, August 12 - 15, 2008. In
        <emphasis role="ital">Proceedings of Balisage: The Markup Conference</emphasis> 2008.
      Balisage Series on Markup Technologies, vol. 1 (2008). DOI: 10.4242/BalisageVol1.Marcoux01.
        <link>http://www.balisage.net/Proceedings/vol1/html/Marcoux01/BalisageVol1-Marcoux01.html</link></bibliomixed>
    <bibliomixed xml:id="marinelli_2008" xreflabel="Marinelli, Vitali, and Zacchiroli 2008"
      >Marinelli, Paolo Fabio Vitali, and Stefano Zacchiroli. <quote>Towards the unification of
        formats for overlapping markup.</quote>
      <emphasis role="ital">New review of hypermedia and multimedia</emphasis>, 14.1 (2008): 57–94.
        <link>https://hal-univ-diderot.archives-ouvertes.fr/hal-00340578/document</link></bibliomixed>
    <bibliomixed xml:id="MDN_DOM" xreflabel="MDN DOM">Mozilla Developer Network. <quote>Document
        Object Model (DOM).</quote>
      <link>https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model</link></bibliomixed>
    <bibliomixed xml:id="nichol_2002" xreflabel="Nichol 2002">Nichol, Gavin. <quote>Core range
        algebra: toward a formal model of markup.</quote>
      <emphasis role="ital">Proceedings of Extreme Markup Languages</emphasis> 2002. <link
        xlink:href="http://conferences.idealliance.org/extreme/html/2002/Nicol01/EML2002Nicol01.html"
      /></bibliomixed>
    <bibliomixed xml:id="peroni_2014" xreflabel="Peroni et al. 2014">Peroni, Silvio, Francesco Poggi
      and Fabio Vitali. <quote>Overlapproaches in documents: a definitive classification (in OWL,
        2!).</quote> Presented at Balisage: The Markup Conference 2014, Washington, DC, August 5 -
      8, 2014. In <emphasis role="ital">Proceedings of Balisage: The Markup Conference 2014.
        Balisage Series on Markup Technologies</emphasis>, 13 (2014). DOI:
      10.4242/BalisageVol13.Peroni01.
        <link>https://www.balisage.net/Proceedings/vol13/html/Peroni01/BalisageVol13-Peroni01.html</link></bibliomixed>
    <bibliomixed xml:id="piez_2008" xreflabel="Piez 2008">Piez, Wendell. <quote>LMNL in miniature.
        An introduction.</quote> Amsterdam Goddag Workshop, 1–5 December 2008.
        <link>http://piez.org/wendell/LMNL/Amsterdam2008/presentation-slides.html</link></bibliomixed>
    <bibliomixed xml:id="piez_2010" xreflabel="Piez 2010">Piez, Wendell. <quote>Towards hermeneutic
        markup. An architectural outline.</quote> Presentation at Digital Humanities 2010, King’s
      College, London. <link>http://piez.org/wendell/papers/dh2010/</link> The screen shot in this
      paper is taken from
        <link>http://piez.org/wendell/papers/dh2010/clix-sonnets/ozymandias-map.svg</link>.</bibliomixed>
    <bibliomixed xml:id="piez_2014" xreflabel="Piez 2014">Piez, Wendell. <quote>Hierarchies within
        range space: From LMNL to OHCO.</quote> Presented at <emphasis role="ital">Balisage: The
        Markup Conference 2014, Washington, DC, August 5 - 8, 2014.</emphasis> In <emphasis
        role="ital">Proceedings of Balisage: The Markup Conference 2014. Balisage series on markup
        technologies,</emphasis> vol. 13 (2014). DOI: 10.4242/BalisageVol13.Piez01.
        <link>http://www.balisage.net/Proceedings/vol13/html/Piez01/BalisageVol13-Piez01.html</link></bibliomixed>
    <bibliomixed xml:id="piez_2015" xreflabel="Piez 2015">Piez, Wendell. <quote>TEI in LMNL:
        implications for modeling</quote>, <emphasis role="ital">Journal of the Text Encoding
        Initiative</emphasis> [Online], Issue 8 | December 2014 - December 2015, Online since 21
      November 2015, connection on 08 March 2017. URL: <link>http://jtei.revues.org/1337</link>;
      DOI: 10.4000/jtei.1337.</bibliomixed>
    <bibliomixed xml:id="renear_1996" xreflabel="Renear, Mylonas, and Durand 1996">Renear, Allen H.,
      Elli Mylonas, and David G. Durand. <quote>Refining our notion of what text really is: the
        problem of overlapping hierarchies.</quote>
      <emphasis role="ital">Research in humanities computing</emphasis>, ed. Nancy Ide and Susan
      Hockey. Oxford: Oxford University Press. 1996.
        <link>http://cds.library.brown.edu/resources/stg/monographs/ohco.html#derose</link></bibliomixed>
    <bibliomixed xml:id="sperberg-huitfeldt_2000" xreflabel="Sperberg-McQueen and Huitfeldt 2000"
      >Sperberg-McQueen, C. M. and Claus Huitfeldt. <quote>GODDAG: a data structure for overlapping
        hierarchies.</quote>
      <emphasis role="ital">Digital documents: systems and principles: 8th international conference
        on digital documents and electronic publishing, DDEP 2000, 5th international workshop on the
        principles of digital document processing, PODDP 2000, Munich, Germany, September 13–15,
        2000, revised papers</emphasis>, ed. Peter King and Ethan V. Munson. NY: Springer, 2004,
      139–60. A revised version is available at
      <link>http://cmsmcq.com/2000/poddp2000.html</link></bibliomixed>
    <bibliomixed xml:id="sperberg-huitfeldt_2008" xreflabel="Sperberg-McQueen and Huitfeldt 2008"
      >Sperberg-McQueen, C. M. and Claus Huitfeldt. <quote>Markup Discontinued: Discontinuity in
        TexMecs, Goddag structures, and rabbit/duck grammars.</quote>
      <emphasis role="ital">Presented at Balisage: The Markup Conference 2008, Montréal, Canada,
        August 12 - 15, 2008.</emphasis> In <emphasis role="ital">Proceedings of Balisage: The
        Markup Conference 2008. Balisage Series on Markup Technologies</emphasis>, vol. 1 (2008).
      DOI: 10.4242/BalisageVol1.Sperberg-McQueen01.
        <link>http://www.balisage.net/Proceedings/vol1/html/Sperberg-McQueen01/BalisageVol1-Sperberg-McQueen01.html</link></bibliomixed>
    <bibliomixed xml:id="tennison_2007" xreflabel="Tennison 2007">Tennison, Jeni. <quote>Creole:
        validating overlapping markup.</quote> Presented at XTech 2007.
        <link>http://www.princexml.com/howcome/2007/xtech/papers/output/0077-30.pdf</link></bibliomixed>
    <bibliomixed xml:id="tennison_2008" xreflabel="Tennison 2008">Tennison, Jeni. <quote>Overlap,
        containment and dominance. <emphasis role="ital">Jeni’s musings</emphasis>, 2008-12-06. </quote>
      <link>http://www.jenitennison.com/2008/12/06/overlap-containment-and-dominance.html</link></bibliomixed>
    <bibliomixed xml:id="W3C_DOM" xreflabel="W3C DOM">W3C. <quote>What is the Document Object
        Model?</quote>
      <emphasis role="ital">Document Object Model (DOM). Level 2 Core Specification. Version
        1.0</emphasis>
      <link>https://www.w3.org/TR/DOM-Level-2-Core/introduction.html</link></bibliomixed>
    <bibliomixed xml:id="W3C_xml" xreflabel="W3C XML">W3C. <emphasis role="ital">Extensible Markup
        Language (XML) 1.0 (fifth edition).</emphasis>
      <link>http://www.w3.org/TR/xml/</link></bibliomixed>
    <bibliomixed xml:id="W3C_xmlinfoset" xreflabel="W3C XML InfoSet">W3C. <emphasis role="ital">XML
        Information Set (second edition).</emphasis>
      <link>https://www.w3.org/TR/xml-infoset/</link></bibliomixed>
    <bibliomixed xml:id="W3C_xdm" xreflabel="W3C XDM">W3C. <emphasis role="ital">XQuery and XPath
        Data Model 3.1.</emphasis>
      <link>https://www.w3.org/TR/xpath-datamodel-3/#Node</link></bibliomixed>
  </bibliography>
</article>
